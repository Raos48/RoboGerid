#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.1
#  in conjunction with Tcl version 8.6
#    Dec 30, 2024 05:30:36 PM -03  platform: Windows NT

# --- START CUSTOM CODE ---
import tkinter as tk
from tkinter import ttk
import sys
import bot_gerid_support
from excel_import import import_excel
from gerid import run_automation
import threading

def run_automation_thread(file_path, update_label_func=None):
    thread = threading.Thread(target=run_automation, args=(file_path, update_label_func))
    thread.start()

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    bot_gerid_support.set_Tk_var()
    top = Toplevel1(root)
    bot_gerid_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    root = rt
    w = tk.Toplevel(root)
    bot_gerid_support.set_Tk_var()
    top = Toplevel1(w)
    bot_gerid_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def run_automation(self):
        if self.file_path:
            run_automation_thread(self.file_path, self.update_label)
        else:
            print("Por favor, importe um arquivo Excel primeiro.")

    def import_file(self):
        self.workbook, self.sheet, self.file_path = import_excel()
        if self.file_path:
            self.Label1.configure(text=self.file_path)

    def update_label(self, linha):
        self.Label2.configure(text=str(linha - 1))

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        self.top = top
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("647x498+559+201")
        top.minsize(120, 1)
        top.maxsize(3524, 1063)
        top.resizable(1, 1)
        top.title("Bot GERID e SAGGESTAO")
        top.configure(borderwidth="2")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        # Registros processados========================================
        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(x=10, y=10, width=150, height=56, bordermode='ignore')
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''Registros processados.''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")
        # --------------
        self.Label2 = tk.Label(self.Labelframe2)
        self.Label2.place(x=20, y=20, height=26, width=18, bordermode='ignore')
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Verdana} -size 15 -weight bold")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''0''')
        # Registros processados========================================

        # SELECT FUNCIONALIDADE========================================
        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(x=170, y=10, width=363, height=56)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Selecione a funcionalidade desejada.''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        # --------------
        self.TCombobox1 = ttk.Combobox(self.Labelframe1)
        self.TCombobox1.place(x=10, y=20, width=333, height=27, bordermode='ignore')
        self.TCombobox1.configure(state='readonly')
        self.TCombobox1.configure(textvariable=bot_gerid_support.combobox)
        self.TCombobox1.configure(foreground="#000000")
        self.TCombobox1.configure(takefocus="")
        # SELECT FUNCIONALIDADE========================================

        # SELECT INSTANCIAS=================================================
        self.Labelframe3 = tk.LabelFrame(top)
        self.Labelframe3.place(x=540, y=10, height=55, width=80)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(foreground="black")
        self.Labelframe3.configure(text='''Instâncias''')
        self.Labelframe3.configure(background="#d9d9d9")
        self.Labelframe3.configure(highlightbackground="#d9d9d9")
        self.Labelframe3.configure(highlightcolor="black")
        self.Spinbox1 = tk.Spinbox(top, from_=1.0, to=100.0)

        self.Spinbox1.place(x=560, y=30, height=21, width=48)
        self.Spinbox1.configure(activebackground="#f9f9f9")
        self.Spinbox1.configure(background="white")
        self.Spinbox1.configure(buttonbackground="#d9d9d9")
        self.Spinbox1.configure(disabledforeground="#a3a3a3")
        self.Spinbox1.configure(font="TkDefaultFont")
        self.Spinbox1.configure(foreground="black")
        self.Spinbox1.configure(highlightbackground="black")
        self.Spinbox1.configure(highlightcolor="black")
        self.Spinbox1.configure(insertbackground="black")
        self.Spinbox1.configure(selectbackground="#c4c4c4")
        self.Spinbox1.configure(selectforeground="black")
        self.Spinbox1.configure(takefocus="0")
        self.Spinbox1.configure(textvariable=bot_gerid_support.spinbox)
        # INSTANCIAS=================================================

        # IMPORTAR ARQUIVO DE CONFIGURAÇÃO=========================
        self.Importar_Arquivo_de_Configuração = tk.LabelFrame(top)
        self.Importar_Arquivo_de_Configuração.place(x=10, y=60, width=615, height=62, bordermode='ignore')
        self.Importar_Arquivo_de_Configuração.configure(relief='groove')
        self.Importar_Arquivo_de_Configuração.configure(foreground="black")
        self.Importar_Arquivo_de_Configuração.configure(text='''Importar arquivo de configuração.''')
        self.Importar_Arquivo_de_Configuração.configure(background="#d9d9d9")
        self.Importar_Arquivo_de_Configuração.configure(highlightbackground="#d9d9d9")
        self.Importar_Arquivo_de_Configuração.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Importar_Arquivo_de_Configuração)
        self.Label1.place(x=100, y=30, height=23, width=497, bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='sw')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(borderwidth="1")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 10 -underline 1")
        self.Label1.configure(foreground="#004080")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(justify='left')
        self.Label1.configure(relief="sunken")
        self.Label1.configure(text='''Nome do Arquivo.''')

        self.TButton1 = ttk.Button(self.Importar_Arquivo_de_Configuração)
        self.TButton1.place(x=10, y=30, height=27, width=77, bordermode='ignore')
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Importar''')
        self.TButton1.configure(command=self.import_file)
        # IMPORTAR ARQUIVO DE CONFIGURAÇÃO=========================

        # EXECUTAR=================================================
        self.Frame1 = tk.Frame(top)
        self.Frame1.place(x=10, y=130,height=45, width=615)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(x=530, y=10, height=28, width=68)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#00f47a")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(takefocus="0")
        self.Button2.configure(text='''Executar''')
        self.Button2.configure(command=self.run_automation)

        self.TProgressbar1 = ttk.Progressbar(top)
        self.TProgressbar1.place(x=20, y=140,height=22, width=514)
        self.TProgressbar1.configure(length="100")
        self.TProgressbar1.configure(takefocus="0")
        # EXECUTAR=================================================

        # Frame para o terminal
        self.terminal_frame = ttk.Frame(top)
        self.terminal_frame.place(x=10, y=180, height=300, width=615)

        # Terminal
        self.terminal = tk.Text(self.terminal_frame, wrap=tk.WORD, bg='black', fg='white')
        self.terminal.pack(expand=True, fill='both')

        # Redirecionar a saída padrão para o terminal
        sys.stdout = self

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

    def write(self, txt):
        self.terminal.insert(tk.END, txt)
        self.terminal.see(tk.END)

    def flush(self):
        pass

if __name__ == '__main__':
    vp_start_gui()
