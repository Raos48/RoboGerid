#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.1
#  in conjunction with Tcl version 8.6
#    Dec 30, 2024 05:30:36 PM -03  platform: Windows NT

import sys
import threading
# --- START CUSTOM CODE ---
import tkinter as tk
from tkinter import ttk

from excel_import import import_excel
from gerid import run_automation_gerid
from saggestao_servidores import run_automation_thread_saggestao
from saggestao_transbordo import run_automation_thread_saggestao_transbordo
import requests
from tkinter import messagebox
import json
import bot_gerid_support
import os



def get_github_message():
    try:
        # URL do arquivo raw no GitHub contendo a mensagem
        url = "https://raw.githubusercontent.com/Raos48/RoboGerid/refs/heads/main/message.json"
        response = requests.get(url)
        response.raise_for_status()  # Levanta uma exceção para erros HTTP
        data = json.loads(response.text)
        return data.get("message"), data.get("block_execution", False)
    except Exception as e:
        print(f"Erro ao obter mensagem do GitHub: {e}")
        return None, False

def truncate_message(message, max_length=100):
    if len(message) > max_length:
        return message[:max_length] + "..."
    return message


def show_popup(message, block_execution):
    if block_execution:
        messagebox.showerror("Execução Bloqueada", message)
        sys.exit()
    else:
        messagebox.showinfo("Mensagem", message)


def run_automation_thread(file_path, update_label_func=None, update_status_func=None,stop_event=None):
    thread = threading.Thread(target=run_automation_gerid, args=(file_path, update_label_func, update_status_func, stop_event))
    thread.start()
    return thread  # Retorna a thread para que possamos acompanhar seu estado

def vp_start_gui():
    global val, w, root
    
    message, block_execution = get_github_message()
    if message:
        show_popup(message, block_execution)
    
    if block_execution:
        return  # Encerra a execução se estiver bloqueada
    
    root = tk.Tk()
    bot_gerid_support.set_Tk_var()
    top = Toplevel1(root)
    bot_gerid_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    root = rt
    w = tk.Toplevel(root)
    bot_gerid_support.set_Tk_var()
    top = Toplevel1(w)
    bot_gerid_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        self.top = top
        
        self.automation_thread = None
        self.should_stop = False
        self.stop_event = threading.Event()
        
        
        
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("647x515+559+201")
        top.minsize(120, 1)
        top.maxsize(3524, 1063)
        top.resizable(1, 1)
        top.title("Bot GERID e SAGGESTAO")
        top.configure(borderwidth="2")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        # Registros processados========================================
        self.Labelframe2 = tk.LabelFrame(top)
        self.Labelframe2.place(x=10, y=10, width=150, height=56, bordermode='ignore')
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text='''Registros processados.''')
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="black")
        # --------------
        self.Label2 = tk.Label(self.Labelframe2)
        self.Label2.place(x=20, y=20, height=30, width=30, bordermode='ignore')
        self.Label2.configure(activebackground="#000000")  # Fundo preto
        self.Label2.configure(activeforeground="green")  # Fonte verde
        self.Label2.configure(background="#000000")  # Fundo preto
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Verdana} -size 10 -weight bold")  # Reduzindo o tamanho da fonte
        self.Label2.configure(foreground="#32CD32")  # Cor verde limão
        self.Label2.configure(highlightbackground="#000000")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''0''')
        # Registros processados========================================

        # SELECT FUNCIONALIDADE========================================
        self.Labelframe1 = tk.LabelFrame(top)
        self.Labelframe1.place(x=170, y=10, width=363, height=56)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text='''Selecione a funcionalidade desejada.''')
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        # --------------
        self.TCombobox1 = ttk.Combobox(self.Labelframe1)
        self.TCombobox1.place(x=10, y=20, width=333, height=27, bordermode='ignore')
        self.TCombobox1.configure(state='readonly')
        self.TCombobox1.configure(textvariable=bot_gerid_support.combobox)
        self.TCombobox1.configure(foreground="#000000")
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1['values'] = ['Atribuição e Revalidação Acessos GERID', 'Configuração de Perfis SAGGESTÃO','Configuração de Unidades SAGGESTÃO']
        self.TCombobox1.current(0)  # Define a primeira opção como padrão
        # SELECT FUNCIONALIDADE========================================

        # SELECT INSTANCIAS=================================================
        self.Labelframe3 = tk.LabelFrame(top)
        self.Labelframe3.place(x=540, y=10, height=55, width=80)
        self.Labelframe3.configure(relief='groove')
        self.Labelframe3.configure(foreground="black")
        self.Labelframe3.configure(text='''Instâncias''')
        self.Labelframe3.configure(background="#d9d9d9")
        self.Labelframe3.configure(highlightbackground="#d9d9d9")
        self.Labelframe3.configure(highlightcolor="black")
        self.Spinbox1 = tk.Spinbox(top, from_=1.0, to=100.0)

        self.Spinbox1.place(x=560, y=30, height=21, width=48)
        self.Spinbox1.configure(activebackground="#f9f9f9")
        self.Spinbox1.configure(background="white")
        self.Spinbox1.configure(buttonbackground="#d9d9d9")
        self.Spinbox1.configure(disabledforeground="#a3a3a3")
        self.Spinbox1.configure(font="TkDefaultFont")
        self.Spinbox1.configure(foreground="black")
        self.Spinbox1.configure(highlightbackground="black")
        self.Spinbox1.configure(highlightcolor="black")
        self.Spinbox1.configure(insertbackground="black")
        self.Spinbox1.configure(selectbackground="#c4c4c4")
        self.Spinbox1.configure(selectforeground="black")
        self.Spinbox1.configure(takefocus="0")
        self.Spinbox1.configure(textvariable=bot_gerid_support.spinbox)
        # INSTANCIAS=================================================

        # IMPORTAR ARQUIVO DE CONFIGURAÇÃO=========================
        self.Importar_Arquivo_de_Configuração = tk.LabelFrame(top)
        self.Importar_Arquivo_de_Configuração.place(x=10, y=60, width=615, height=62, bordermode='ignore')
        self.Importar_Arquivo_de_Configuração.configure(relief='groove')
        self.Importar_Arquivo_de_Configuração.configure(foreground="black")
        self.Importar_Arquivo_de_Configuração.configure(text='''Importar arquivo de configuração.''')
        self.Importar_Arquivo_de_Configuração.configure(background="#d9d9d9")
        self.Importar_Arquivo_de_Configuração.configure(highlightbackground="#d9d9d9")
        self.Importar_Arquivo_de_Configuração.configure(highlightcolor="black")

        self.Label1 = tk.Label(self.Importar_Arquivo_de_Configuração)
        self.Label1.place(x=100, y=30, height=23, width=497, bordermode='ignore')
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='sw')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(borderwidth="1")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font="-family {Segoe UI} -size 10 -underline 1")
        self.Label1.configure(foreground="#004080")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(justify='left')
        self.Label1.configure(relief="sunken")
        self.Label1.configure(text='''Nome do Arquivo.''')

        self.TButton1 = ttk.Button(self.Importar_Arquivo_de_Configuração)
        self.TButton1.place(x=10, y=30, height=27, width=77, bordermode='ignore')
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Importar''')
        self.TButton1.configure(command=self.import_file)
        # IMPORTAR ARQUIVO DE CONFIGURAÇÃO=========================

        # EXECUTAR=================================================
        self.Frame1 = tk.Frame(top)
        self.Frame1.place(x=10, y=130,height=45, width=615)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Button2 = tk.Button(self.Frame1)
        self.Button2.place(x=530, y=10, height=28, width=68)
        self.Button2.configure(activebackground="#ececec")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#00f47a")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="#000000")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(takefocus="0")
        self.Button2.configure(text='''Executar''')        
        self.Button2.configure(command=self.run_selected_automation)

        # self.TProgressbar1 = ttk.Progressbar(top)
        # self.TProgressbar1.place(x=20, y=140,height=22, width=410)
        # self.TProgressbar1.configure(length="100")
        # self.TProgressbar1.configure(takefocus="0")
        # BARRA DE PROGRESSO ======================================



        # LABEL ==================================================
        # self.newLabel = tk.Label(top)
        # self.newLabel.place(x=20, y=140, height=22, width=410)
        # self.newLabel.configure(activebackground="#d9d9d9")
        # self.newLabel.configure(activeforeground="black")
        # self.newLabel.configure(background="#d9d9d9")
        # self.newLabel.configure(disabledforeground="#a3a3a3")
        # self.newLabel.configure(font="-family {Verdana} -size  -weight bold")
        # self.newLabel.configure(foreground="#32CD32")  # Cor verde limão
        # self.newLabel.configure(highlightbackground="#d9d9d9")
        # self.newLabel.configure(highlightcolor="black")
        # self.newLabel.configure(text='''Novo elemento informativo''')


        self.footerLabel = tk.Label(top, text="Desenvolvido por Ricardo Alves", font="-family {Verdana} -size 8", bg=_bgcolor, fg=_fgcolor)
        self.footerLabel.place(x=20, y=140, height=22, width=200)
        # LABEL ==================================================



        # EXECUTAR=================================================

        # Frame para o terminal
        self.terminal_frame = ttk.Frame(top)
        self.terminal_frame.place(x=10, y=180, height=300, width=615)

        # Terminal
        self.terminal = tk.Text(self.terminal_frame, wrap=tk.WORD, bg='black', fg='white')
        self.terminal.pack(expand=True, fill='both')

        # Redirecionar a saída padrão e de erro para o terminal
        sys.stdout = self
        sys.stderr = self

        # Label para indicar o status da execução
        self.status_label = tk.Label(top)
        self.status_label.place(x=9, y=483, height=26, width=615)  # Reduzindo a largura
        self.status_label.configure(activebackground="#000000")  # Fundo preto
        self.status_label.configure(activeforeground="#ccff00")  # Fonte verde amarela brilhante
        self.status_label.configure(background="#000000")  # Fundo preto
        self.status_label.configure(disabledforeground="#a3a3a3")
        self.status_label.configure(font="-family {Verdana} -size 9")  # Removendo o negrito
        self.status_label.configure(foreground="#ccff00")  # Fonte verde amarela brilhante
        self.status_label.configure(highlightbackground="#000000")
        self.status_label.configure(highlightcolor="black")
        self.status_label.configure(text='''Aguardando execução...''')


        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)
        
        # Adicione este botão na seção Interromper===========================
        self.Button3 = tk.Button(self.Frame1)
        self.Button3.place(x=445, y=10, height=28, width=80)
        self.Button3.configure(activebackground="#ececec")
        self.Button3.configure(activeforeground="#000000")
        self.Button3.configure(background="#ff0000")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="#000000")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="black")
        self.Button3.configure(pady="0")
        self.Button3.configure(takefocus="0")
        self.Button3.configure(text='''Interromper''')
        self.Button3.configure(command=self.stop_automation)

    def stop_automation(self):
        if self.automation_thread and self.automation_thread.is_alive():
            self.should_stop = True
            self.stop_event.set()
            print("Solicitação de interrupção recebida...")
            self.status_label.configure(text="Interrompendo...")
            # Fecha o navegador se estiver aberto
            if hasattr(self, 'driver'):
                try:
                    self.driver.quit()
                except Exception as e:
                    print(f"Erro ao fechar o navegador: {e}")
        
        self.status_label.configure(text="Operação interrompida pelo usuário")
        self.Button3.configure(state='disabled')
        self.Button2.configure(state='normal')  

    
    def run_selected_automation(self):
        selected_option = self.TCombobox1.get()
        if selected_option == 'Atribuição e Revalidação Acessos GERID':
            self.run_automation_gerid()
        elif selected_option == 'Configuração de Perfis SAGGESTÃO':
            self.run_automation_saggestao()
        elif selected_option == 'Configuração de Unidades SAGGESTÃO':
            self.run_automation_saggestao_transbordo()
        else:
            print("Opção inválida selecionada.")
    
    
    def run_automation_gerid(self):
        if self.file_path:
            self.stop_event.clear()
            self.should_stop = False
            self.automation_thread = run_automation_thread(
                self.file_path, 
                self.update_label, 
                self.update_status,
                self.stop_event  # Passe o evento de parada
            )
        else:
            print("Por favor, importe um arquivo Excel primeiro.")

    def run_automation_saggestao(self):
        if self.file_path:  
            self.automation_thread = run_automation_thread_saggestao(
                self.file_path, 
                self.update_label, 
                self.update_status,
                self.stop_event  # Adicione este parâmetro
            )
            print("Executando a automação para Configuração de Perfis SAGGESTÃO.")
        else:
            print("Por favor, importe um arquivo Excel primeiro.")
            
            
    def run_automation_saggestao_transbordo(self):
        if self.file_path:  
            self.automation_thread = run_automation_thread_saggestao_transbordo(
                self.file_path, 
                self.update_label, 
                self.update_status,
                self.stop_event  # Adicione este parâmetro
            )
            print("Executando a automação para Configuração de TRANSBORDO de Unidades.")
        else:
            print("Por favor, importe um arquivo Excel primeiro.")
    
    def write(self, txt):
        if not self.stop_event.is_set():
            # Configure as tags de cor se ainda não existirem
            if not hasattr(self, 'tags_configured'):
                self.terminal.tag_configure('success', foreground='#00FF00')  # Verde brilhante
                self.terminal.tag_configure('error', foreground='#FFFF00')    # Amarelo
                self.tags_configured = True
            
            # Verificar se é uma mensagem de sucesso
            if "A operação foi executada com sucesso" in txt:
                self.terminal.insert(tk.END, txt, 'success')
            # Verificar se é uma mensagem de erro (qualquer mensagem da lista de erros)
            elif any(error_msg in txt for error_msg in [
                "Domínio não existe",
                "Ocorreu um erro de comunicação",
                "A Data de Validade não deve ser superior",
                "Gestor de Acesso só pode atribuir acesso",
                "Não é permitido dar uma autorização a si mesmo",
                "Erro",
                "erro"
            ]):
                self.terminal.insert(tk.END, txt, 'error')
            else:
                # Texto normal em branco (padrão)
                self.terminal.insert(tk.END, txt)
            
            self.terminal.see(tk.END)


    def flush(self):
        pass

    def run_automation(self):
        if self.file_path:
            self.automation_thread = run_automation_thread(self.file_path, self.update_label, self.update_status)
        else:
            print("Por favor, importe um arquivo Excel primeiro.")

    def import_file(self):
        try:
            self.workbook, self.sheet, self.file_path = import_excel()
            if self.file_path:                
                file_name = os.path.basename(self.file_path)
                self.Label1.configure(text=file_name)
        except Exception as e:
            print(f"Erro ao importar arquivo: {e}")

    def update_label(self, linha):
        self.Label2.configure(text=str(linha - 1))

    def update_status(self, status):
        # Remover os segundos da mensagem de status
        if "em" in status:
            status_parts = status.split("em")
            if len(status_parts) > 1:
                time_part = status_parts[1].strip()
                time_without_seconds = ":".join(time_part.split(":")[:2])
                status = status_parts[0] + " em " + time_without_seconds
        # Truncar a mensagem se for muito longa
        status = truncate_message(status)
        self.status_label.configure(text=status)

    def on_closing(self):
        self.stop_automation()
        if self.automation_thread and self.automation_thread.is_alive():
            self.automation_thread.join(timeout=5)
        self.top.destroy()

if __name__ == '__main__':
    vp_start_gui()
