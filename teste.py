#bot_gerid.py

#! /usr/bin/env python

#  -*- coding: utf-8 -*-

#

# GUI module generated by PAGE version 5.1

#  in conjunction with Tcl version 8.6

#    Dec 30, 2024 05:30:36 PM -03  platform: Windows NT



import sys

import threading

# --- START CUSTOM CODE ---

import tkinter as tk

from tkinter import ttk



from excel_import import import_excel

from gerid import run_automation_gerid

from saggestao_servidores import run_automation_thread_saggestao

from saggestao_transbordo import run_automation_thread_saggestao_transbordo

import requests

from tkinter import messagebox

import json

import bot_gerid_support

import os







def get_github_message():

    try:

        # URL do arquivo raw no GitHub contendo a mensagem

        url = "https://raw.githubusercontent.com/Raos48/RoboGerid/refs/heads/main/message.json"

        response = requests.get(url)

        response.raise_for_status()  # Levanta uma exceção para erros HTTP

        data = json.loads(response.text)

        return data.get("message"), data.get("block_execution", False)

    except Exception as e:

        print(f"Erro ao obter mensagem do GitHub: {e}")

        return None, False



def truncate_message(message, max_length=100):

    if len(message) > max_length:

        return message[:max_length] + "..."

    return message





def show_popup(message, block_execution):

    if block_execution:

        messagebox.showerror("Execução Bloqueada", message)

        sys.exit()

    else:

        messagebox.showinfo("Mensagem", message)





def run_automation_thread(file_path, update_label_func=None, update_status_func=None,stop_event=None):

    thread = threading.Thread(target=run_automation_gerid, args=(file_path, update_label_func, update_status_func, stop_event))

    thread.start()

    return thread  # Retorna a thread para que possamos acompanhar seu estado



def vp_start_gui():

    global val, w, root

   

    message, block_execution = get_github_message()

    if message:

        show_popup(message, block_execution)

   

    if block_execution:

        return  # Encerra a execução se estiver bloqueada

   

    root = tk.Tk()

    bot_gerid_support.set_Tk_var()

    top = Toplevel1(root)

    bot_gerid_support.init(root, top)

    root.mainloop()



w = None

def create_Toplevel1(rt, *args, **kwargs):

    '''Starting point when module is imported by another module.

       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''

    global w, w_win, root

    root = rt

    w = tk.Toplevel(root)

    bot_gerid_support.set_Tk_var()

    top = Toplevel1(w)

    bot_gerid_support.init(w, top, *args, **kwargs)

    return (w, top)



def destroy_Toplevel1():

    global w

    w.destroy()

    w = None



class Toplevel1:

    def __init__(self, top=None):

        '''This class configures and populates the toplevel window.

           top is the toplevel containing window.'''

        self.top = top

       

        self.automation_thread = None

        self.should_stop = False

        self.stop_event = threading.Event()

       

       

       

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'

        _fgcolor = '#000000'  # X11 color: 'black'

        _compcolor = '#d9d9d9' # X11 color: 'gray85'

        _ana1color = '#d9d9d9' # X11 color: 'gray85'

        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        self.style = ttk.Style()

        if sys.platform == "win32":

            self.style.theme_use('winnative')

        self.style.configure('.',background=_bgcolor)

        self.style.configure('.',foreground=_fgcolor)

        self.style.configure('.',font="TkDefaultFont")

        self.style.map('.',background=

            [('selected', _compcolor), ('active',_ana2color)])



        top.geometry("647x515+559+201")

        top.minsize(120, 1)

        top.maxsize(3524, 1063)

        top.resizable(1, 1)

        top.title("Bot GERID e SAGGESTAO")

        top.configure(borderwidth="2")

        top.configure(background="#d9d9d9")

        top.configure(highlightbackground="#d9d9d9")

        top.configure(highlightcolor="black")



        # Registros processados========================================

        self.Labelframe2 = tk.LabelFrame(top)

        self.Labelframe2.place(x=10, y=10, width=150, height=56, bordermode='ignore')

        self.Labelframe2.configure(relief='groove')

        self.Labelframe2.configure(foreground="black")

        self.Labelframe2.configure(text='''Registros processados.''')

        self.Labelframe2.configure(background="#d9d9d9")

        self.Labelframe2.configure(highlightbackground="#d9d9d9")

        self.Labelframe2.configure(highlightcolor="black")

        # --------------

        self.Label2 = tk.Label(self.Labelframe2)

        self.Label2.place(x=20, y=20, height=30, width=30, bordermode='ignore')

        self.Label2.configure(activebackground="#000000")  # Fundo preto

        self.Label2.configure(activeforeground="green")  # Fonte verde

        self.Label2.configure(background="#000000")  # Fundo preto

        self.Label2.configure(disabledforeground="#a3a3a3")

        self.Label2.configure(font="-family {Verdana} -size 10 -weight bold")  # Reduzindo o tamanho da fonte

        self.Label2.configure(foreground="#32CD32")  # Cor verde limão

        self.Label2.configure(highlightbackground="#000000")

        self.Label2.configure(highlightcolor="black")

        self.Label2.configure(text='''0''')

        # Registros processados========================================



        # SELECT FUNCIONALIDADE========================================

        self.Labelframe1 = tk.LabelFrame(top)

        self.Labelframe1.place(x=170, y=10, width=363, height=56)

        self.Labelframe1.configure(relief='groove')

        self.Labelframe1.configure(foreground="black")

        self.Labelframe1.configure(text='''Selecione a funcionalidade desejada.''')

        self.Labelframe1.configure(background="#d9d9d9")

        self.Labelframe1.configure(highlightbackground="#d9d9d9")

        self.Labelframe1.configure(highlightcolor="black")

        # --------------

        self.TCombobox1 = ttk.Combobox(self.Labelframe1)

        self.TCombobox1.place(x=10, y=20, width=333, height=27, bordermode='ignore')

        self.TCombobox1.configure(state='readonly')

        self.TCombobox1.configure(textvariable=bot_gerid_support.combobox)

        self.TCombobox1.configure(foreground="#000000")

        self.TCombobox1.configure(takefocus="")

        self.TCombobox1['values'] = ['Atribuição e Revalidação Acessos GERID', 'Configuração de Perfis SAGGESTÃO','Configuração de Unidades SAGGESTÃO']

        self.TCombobox1.current(0)  # Define a primeira opção como padrão

        # SELECT FUNCIONALIDADE========================================



        # SELECT INSTANCIAS=================================================

        self.Labelframe3 = tk.LabelFrame(top)

        self.Labelframe3.place(x=540, y=10, height=55, width=80)

        self.Labelframe3.configure(relief='groove')

        self.Labelframe3.configure(foreground="black")

        self.Labelframe3.configure(text='''Instâncias''')

        self.Labelframe3.configure(background="#d9d9d9")

        self.Labelframe3.configure(highlightbackground="#d9d9d9")

        self.Labelframe3.configure(highlightcolor="black")

        self.Spinbox1 = tk.Spinbox(top, from_=1.0, to=100.0)



        self.Spinbox1.place(x=560, y=30, height=21, width=48)

        self.Spinbox1.configure(activebackground="#f9f9f9")

        self.Spinbox1.configure(background="white")

        self.Spinbox1.configure(buttonbackground="#d9d9d9")

        self.Spinbox1.configure(disabledforeground="#a3a3a3")

        self.Spinbox1.configure(font="TkDefaultFont")

        self.Spinbox1.configure(foreground="black")

        self.Spinbox1.configure(highlightbackground="black")

        self.Spinbox1.configure(highlightcolor="black")

        self.Spinbox1.configure(insertbackground="black")

        self.Spinbox1.configure(selectbackground="#c4c4c4")

        self.Spinbox1.configure(selectforeground="black")

        self.Spinbox1.configure(takefocus="0")

        self.Spinbox1.configure(textvariable=bot_gerid_support.spinbox)

        # INSTANCIAS=================================================



        # IMPORTAR ARQUIVO DE CONFIGURAÇÃO=========================

        self.Importar_Arquivo_de_Configuração = tk.LabelFrame(top)

        self.Importar_Arquivo_de_Configuração.place(x=10, y=60, width=615, height=62, bordermode='ignore')

        self.Importar_Arquivo_de_Configuração.configure(relief='groove')

        self.Importar_Arquivo_de_Configuração.configure(foreground="black")

        self.Importar_Arquivo_de_Configuração.configure(text='''Importar arquivo de configuração.''')

        self.Importar_Arquivo_de_Configuração.configure(background="#d9d9d9")

        self.Importar_Arquivo_de_Configuração.configure(highlightbackground="#d9d9d9")

        self.Importar_Arquivo_de_Configuração.configure(highlightcolor="black")



        self.Label1 = tk.Label(self.Importar_Arquivo_de_Configuração)

        self.Label1.place(x=100, y=30, height=23, width=497, bordermode='ignore')

        self.Label1.configure(activebackground="#f9f9f9")

        self.Label1.configure(activeforeground="black")

        self.Label1.configure(anchor='sw')

        self.Label1.configure(background="#d9d9d9")

        self.Label1.configure(borderwidth="1")

        self.Label1.configure(compound='left')

        self.Label1.configure(disabledforeground="#a3a3a3")

        self.Label1.configure(font="-family {Segoe UI} -size 10 -underline 1")

        self.Label1.configure(foreground="#004080")

        self.Label1.configure(highlightbackground="#d9d9d9")

        self.Label1.configure(highlightcolor="black")

        self.Label1.configure(justify='left')

        self.Label1.configure(relief="sunken")

        self.Label1.configure(text='''Nome do Arquivo.''')



        self.TButton1 = ttk.Button(self.Importar_Arquivo_de_Configuração)

        self.TButton1.place(x=10, y=30, height=27, width=77, bordermode='ignore')

        self.TButton1.configure(takefocus="")

        self.TButton1.configure(text='''Importar''')

        self.TButton1.configure(command=self.import_file)

        # IMPORTAR ARQUIVO DE CONFIGURAÇÃO=========================



        # EXECUTAR=================================================

        self.Frame1 = tk.Frame(top)

        self.Frame1.place(x=10, y=130,height=45, width=615)

        self.Frame1.configure(relief='groove')

        self.Frame1.configure(borderwidth="2")

        self.Frame1.configure(relief="groove")

        self.Frame1.configure(background="#d9d9d9")

        self.Frame1.configure(highlightbackground="#d9d9d9")

        self.Frame1.configure(highlightcolor="black")



        self.Button2 = tk.Button(self.Frame1)

        self.Button2.place(x=530, y=10, height=28, width=68)

        self.Button2.configure(activebackground="#ececec")

        self.Button2.configure(activeforeground="#000000")

        self.Button2.configure(background="#00f47a")

        self.Button2.configure(disabledforeground="#a3a3a3")

        self.Button2.configure(foreground="#000000")

        self.Button2.configure(highlightbackground="#d9d9d9")

        self.Button2.configure(highlightcolor="black")

        self.Button2.configure(pady="0")

        self.Button2.configure(takefocus="0")

        self.Button2.configure(text='''Executar''')        

        self.Button2.configure(command=self.run_selected_automation)



        # self.TProgressbar1 = ttk.Progressbar(top)

        # self.TProgressbar1.place(x=20, y=140,height=22, width=410)

        # self.TProgressbar1.configure(length="100")

        # self.TProgressbar1.configure(takefocus="0")

        # BARRA DE PROGRESSO ======================================







        # LABEL ==================================================

        # self.newLabel = tk.Label(top)

        # self.newLabel.place(x=20, y=140, height=22, width=410)

        # self.newLabel.configure(activebackground="#d9d9d9")

        # self.newLabel.configure(activeforeground="black")

        # self.newLabel.configure(background="#d9d9d9")

        # self.newLabel.configure(disabledforeground="#a3a3a3")

        # self.newLabel.configure(font="-family {Verdana} -size  -weight bold")

        # self.newLabel.configure(foreground="#32CD32")  # Cor verde limão

        # self.newLabel.configure(highlightbackground="#d9d9d9")

        # self.newLabel.configure(highlightcolor="black")

        # self.newLabel.configure(text='''Novo elemento informativo''')





        self.footerLabel = tk.Label(top, text="Desenvolvido por Ricardo Alves", font="-family {Verdana} -size 8", bg=_bgcolor, fg=_fgcolor)

        self.footerLabel.place(x=20, y=140, height=22, width=200)

        # LABEL ==================================================







        # EXECUTAR=================================================



        # Frame para o terminal

        self.terminal_frame = ttk.Frame(top)

        self.terminal_frame.place(x=10, y=180, height=300, width=615)



        # Terminal

        self.terminal = tk.Text(self.terminal_frame, wrap=tk.WORD, bg='black', fg='white')

        self.terminal.pack(expand=True, fill='both')



        # Redirecionar a saída padrão e de erro para o terminal

        sys.stdout = self

        sys.stderr = self



        # Label para indicar o status da execução

        self.status_label = tk.Label(top)

        self.status_label.place(x=9, y=483, height=26, width=615)  # Reduzindo a largura

        self.status_label.configure(activebackground="#000000")  # Fundo preto

        self.status_label.configure(activeforeground="#ccff00")  # Fonte verde amarela brilhante

        self.status_label.configure(background="#000000")  # Fundo preto

        self.status_label.configure(disabledforeground="#a3a3a3")

        self.status_label.configure(font="-family {Verdana} -size 9")  # Removendo o negrito

        self.status_label.configure(foreground="#ccff00")  # Fonte verde amarela brilhante

        self.status_label.configure(highlightbackground="#000000")

        self.status_label.configure(highlightcolor="black")

        self.status_label.configure(text='''Aguardando execução...''')





        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)

        top.configure(menu = self.menubar)

       

        # Adicione este botão na seção Interromper===========================

        self.Button3 = tk.Button(self.Frame1)

        self.Button3.place(x=445, y=10, height=28, width=80)

        self.Button3.configure(activebackground="#ececec")

        self.Button3.configure(activeforeground="#000000")

        self.Button3.configure(background="#ff0000")

        self.Button3.configure(disabledforeground="#a3a3a3")

        self.Button3.configure(foreground="#000000")

        self.Button3.configure(highlightbackground="#d9d9d9")

        self.Button3.configure(highlightcolor="black")

        self.Button3.configure(pady="0")

        self.Button3.configure(takefocus="0")

        self.Button3.configure(text='''Interromper''')

        self.Button3.configure(command=self.stop_automation)



    def stop_automation(self):

        if self.automation_thread and self.automation_thread.is_alive():

            self.should_stop = True

            self.stop_event.set()

            print("Solicitação de interrupção recebida...")

            self.status_label.configure(text="Interrompendo...")

            # Fecha o navegador se estiver aberto

            if hasattr(self, 'driver'):

                try:

                    self.driver.quit()

                except Exception as e:

                    print(f"Erro ao fechar o navegador: {e}")

       

        self.status_label.configure(text="Operação interrompida pelo usuário")

        self.Button3.configure(state='disabled')

        self.Button2.configure(state='normal')  



   

    def run_selected_automation(self):

        selected_option = self.TCombobox1.get()

        if selected_option == 'Atribuição e Revalidação Acessos GERID':

            self.run_automation_gerid()

        elif selected_option == 'Configuração de Perfis SAGGESTÃO':

            self.run_automation_saggestao()

        elif selected_option == 'Configuração de Unidades SAGGESTÃO':

            self.run_automation_saggestao_transbordo()

        else:

            print("Opção inválida selecionada.")

   

   

    def run_automation_gerid(self):

        if self.file_path:

            self.stop_event.clear()

            self.should_stop = False

            self.automation_thread = run_automation_thread(

                self.file_path,

                self.update_label,

                self.update_status,

                self.stop_event  # Passe o evento de parada

            )

        else:

            print("Por favor, importe um arquivo Excel primeiro.")



    def run_automation_saggestao(self):

        if self.file_path:  

            self.automation_thread = run_automation_thread_saggestao(

                self.file_path,

                self.update_label,

                self.update_status,

                self.stop_event  # Adicione este parâmetro

            )

            print("Executando a automação para Configuração de Perfis SAGGESTÃO.")

        else:

            print("Por favor, importe um arquivo Excel primeiro.")

           

           

    def run_automation_saggestao_transbordo(self):

        if self.file_path:  

            self.automation_thread = run_automation_thread_saggestao_transbordo(

                self.file_path,

                self.update_label,

                self.update_status,

                self.stop_event  # Adicione este parâmetro

            )

            print("Executando a automação para Configuração de TRANSBORDO de Unidades.")

        else:

            print("Por favor, importe um arquivo Excel primeiro.")

   

    def write(self, txt):

        if not self.stop_event.is_set():

            # Configure as tags de cor se ainda não existirem

            if not hasattr(self, 'tags_configured'):

                self.terminal.tag_configure('success', foreground='#00FF00')  # Verde brilhante

                self.terminal.tag_configure('error', foreground='#FFFF00')    # Amarelo

                self.tags_configured = True

           

            # Verificar se é uma mensagem de sucesso

            if "A operação foi executada com sucesso" in txt:

                self.terminal.insert(tk.END, txt, 'success')

            # Verificar se é uma mensagem de erro (qualquer mensagem da lista de erros)

            elif any(error_msg in txt for error_msg in [

                "Domínio não existe",

                "Ocorreu um erro de comunicação",

                "A Data de Validade não deve ser superior",

                "Gestor de Acesso só pode atribuir acesso",

                "Não é permitido dar uma autorização a si mesmo",

                "Erro",

                "erro"

            ]):

                self.terminal.insert(tk.END, txt, 'error')

            else:

                # Texto normal em branco (padrão)

                self.terminal.insert(tk.END, txt)

           

            self.terminal.see(tk.END)





    def flush(self):

        pass



    def run_automation(self):

        if self.file_path:

            self.automation_thread = run_automation_thread(self.file_path, self.update_label, self.update_status)

        else:

            print("Por favor, importe um arquivo Excel primeiro.")



    def import_file(self):

        try:

            self.workbook, self.sheet, self.file_path = import_excel()

            if self.file_path:                

                file_name = os.path.basename(self.file_path)

                self.Label1.configure(text=file_name)

        except Exception as e:

            print(f"Erro ao importar arquivo: {e}")



    def update_label(self, linha):

        self.Label2.configure(text=str(linha - 1))



    def update_status(self, status):

        # Remover os segundos da mensagem de status

        if "em" in status:

            status_parts = status.split("em")

            if len(status_parts) > 1:

                time_part = status_parts[1].strip()

                time_without_seconds = ":".join(time_part.split(":")[:2])

                status = status_parts[0] + " em " + time_without_seconds

        # Truncar a mensagem se for muito longa

        status = truncate_message(status)

        self.status_label.configure(text=status)



    def on_closing(self):

        self.stop_automation()

        if self.automation_thread and self.automation_thread.is_alive():

            self.automation_thread.join(timeout=5)

        self.top.destroy()



if __name__ == '__main__':

    vp_start_gui()







import queue

import subprocess

import threading

import time

import tkinter as tk

from datetime import datetime

from tkinter import messagebox



import openpyxl

import pyotp

from selenium import webdriver

from selenium.common.exceptions import (ElementNotInteractableException,

                                        JavascriptException,

                                        NoSuchElementException, StaleElementReferenceException,

                                        TimeoutException)

from selenium.webdriver.chrome.service import Service

from selenium.webdriver.common.by import By

from selenium.webdriver.common.keys import Keys

from selenium.webdriver.support import expected_conditions as EC

from selenium.webdriver.support.ui import Select, WebDriverWait

from webdriver_manager.chrome import ChromeDriverManager

import statistics

from datetime import datetime, timedelta

import os

import json

import numpy as np

from collections import deque



class GeridProcessoManager:

    def __init__(self, janela_movel=10):

        self.tempos_processamento = []

        self.tempos_movel = deque(maxlen=janela_movel)  # Últimos N tempos para média móvel

        self.total_registros = 0

        self.registros_processados = 0

        self.tempo_inicio_total = None

        self.janela_movel = janela_movel

        self.worksheet = None  # Adicionado para armazenar a referência à planilha



    def inicializar_contagem(self, worksheet):

        """Conta quantos registros precisam ser processados."""

        self.total_registros = 0

        linha = 2

        self.worksheet = worksheet  # Armazena referência à planilha para usar depois



        while worksheet.cell(row=linha, column=1).value is not None:

            if worksheet.cell(row=linha, column=8).value is None:  # Coluna onde status é salvo

                self.total_registros += 1

            linha += 1

        self.tempo_inicio_total = datetime.now()



    def atualizar_total_registros(self, linha_atual):

        """Atualiza o número de registros restantes baseado na linha atual."""

        if self.worksheet is None:

            return



        registros_restantes = 0

        linha_temp = linha_atual



        while self.worksheet.cell(row=linha_temp, column=1).value is not None:

            if self.worksheet.cell(row=linha_temp, column=8).value is None:  # Coluna onde status é salvo

                registros_restantes += 1

            linha_temp += 1



        return registros_restantes



    def registrar_tempo(self, tempo_inicio, tempo_fim, linha_atual=None):

        """Registra o tempo de processamento de um registro."""

        tempo_processamento = (tempo_fim - tempo_inicio).total_seconds()

        self.tempos_processamento.append(tempo_processamento)

        self.tempos_movel.append(tempo_processamento)



        # Atualiza registros processados usando a linha atual, se fornecida

        if linha_atual and self.worksheet:

            registros_restantes = self.atualizar_total_registros(linha_atual)

            self.registros_processados = self.total_registros - registros_restantes

        else:

            self.registros_processados += 1



    def calcular_tendencia(self):

        """Calcula se o processamento está acelerando ou desacelerando."""

        if len(self.tempos_processamento) < 5:

            return None, 0

        # Comparar a média dos últimos registros com a média geral

        media_geral = statistics.mean(self.tempos_processamento)

        media_recente = statistics.mean(self.tempos_movel)

        diferenca_percentual = ((media_geral - media_recente) / media_geral) * 100

        if diferenca_percentual > 5:

            return "acelerando", diferenca_percentual

        elif diferenca_percentual < -5:

            return "desacelerando", diferenca_percentual

        else:

            return "estável", diferenca_percentual



    def calcular_tempo_estimado(self, linha_atual=None):

        """Calcula tempo estimado para finalizar o processamento com base nos tempos registrados."""

        if not self.tempos_processamento:

            return "Calculando...", None, None, None



        # Atualizar contagem de registros restantes se uma linha atual for fornecida

        if linha_atual and self.worksheet:

            registros_restantes = self.atualizar_total_registros(linha_atual)

        else:

            registros_restantes = self.total_registros - self.registros_processados



        # Usar a média móvel se tiver registros suficientes, senão usar a média geral

        if len(self.tempos_movel) >= min(3, self.janela_movel):

            tempo_medio = statistics.mean(self.tempos_movel)

        else:

            tempo_medio = statistics.mean(self.tempos_processamento)



        # Calcular estimativa com base na tendência

        tendencia, percentual = self.calcular_tendencia() if len(self.tempos_processamento) >= 5 else (None, 0)



        # Ajustar a estimativa de acordo com a tendência

        fator_ajuste = 1.0

        if tendencia == "acelerando":

            fator_ajuste = max(0.8, 1.0 - (abs(percentual) / 200))

        elif tendencia == "desacelerando":

            fator_ajuste = min(1.2, 1.0 + (abs(percentual) / 200))



        tempo_medio_ajustado = tempo_medio * fator_ajuste

        tempo_total_estimado = tempo_medio_ajustado * registros_restantes



        # Calcular horário previsto de conclusão

        agora = datetime.now()

        horario_conclusao = agora + timedelta(seconds=tempo_total_estimado)



        # Formatar tempo restante

        horas = int(tempo_total_estimado // 3600)

        minutos = int((tempo_total_estimado % 3600) // 60)

        segundos = int(tempo_total_estimado % 60)



        # Calcular progresso

        progresso = ((self.total_registros - registros_restantes) / self.total_registros * 100) if self.total_registros > 0 else 0



        # Formatar mensagem com base no tempo estimado

        if horas > 0:

            mensagem = f"Estimativa: {horas}h {minutos}min {segundos}s"

        elif minutos > 0:

            mensagem = f"Estimativa: {minutos}min {segundos}s"

        else:

            mensagem = f"Estimativa: {segundos}s"



        # Adicionar info de horário de conclusão

        horario_str = horario_conclusao.strftime("%H:%M:%S")

        data_str = horario_conclusao.strftime("%d/%m/%Y")

        hoje_str = agora.strftime("%d/%m/%Y")



        if data_str == hoje_str:

            mensagem += f" (Término às {horario_str})"

        else:

            mensagem += f" (Término em {data_str} às {horario_str})"



        return mensagem, tendencia, progresso, horario_conclusao



    def calcular_velocidade_media(self):

        """Calcula a velocidade média de processamento (registros por minuto)."""

        if not self.tempos_processamento:

            return 0

        tempo_medio_segundos = statistics.mean(self.tempos_processamento)

        if tempo_medio_segundos > 0:

            return 60 / tempo_medio_segundos  # registros por minuto

        return 0



    def calcular_tempo_decorrido(self):

        """Calcula o tempo decorrido desde o início do processamento."""

        if self.tempo_inicio_total:

            decorrido = datetime.now() - self.tempo_inicio_total

            horas = int(decorrido.total_seconds() // 3600)

            minutos = int((decorrido.total_seconds() % 3600) // 60)

            segundos = int(decorrido.total_seconds() % 60)

            if horas > 0:

                return f"{horas}h {minutos}min {segundos}s"

            elif minutos > 0:

                return f"{minutos}min {segundos}s"

            else:

                return f"{segundos}s"

        return "Desconhecido"



    def get_status(self, linha_atual=None):

        """Retorna o status atual do processamento com informações detalhadas."""

        tempo_estimado, tendencia, progresso, _ = self.calcular_tempo_estimado(linha_atual)



        if linha_atual and self.worksheet:

            registros_restantes = self.atualizar_total_registros(linha_atual)

            registros_processados = self.total_registros - registros_restantes

        else:

            registros_restantes = self.total_registros - self.registros_processados

            registros_processados = self.registros_processados



        velocidade = self.calcular_velocidade_media()

        tempo_decorrido = self.calcular_tempo_decorrido()



        # Construir mensagem de status

        status = f"{progresso:.1f}% ({registros_processados}/{self.total_registros}) | "

        status += f"{tempo_estimado} | Restantes: {registros_restantes} | "

        status += f"{velocidade:.1f} reg/min | Tempo decorrido: {tempo_decorrido}"



        # Adicionar informação de tendência se disponível

        if tendencia:

            status += f" | Processamento {tendencia}"

        return status



def safe_find_element(driver, by, value, max_attempts=5, delay=2):

    """Função para localizar um elemento de forma segura."""

    attempts = 0

    while attempts < max_attempts:

        try:

            return driver.find_element(by, value)

        except StaleElementReferenceException:

            print(f"StaleElementReferenceException ao tentar encontrar elemento {value}. Tentativa {attempts + 1} de {max_attempts}.")

            attempts += 1

            time.sleep(delay)

        except NoSuchElementException:

            print(f"Elemento {value} não encontrado.")

            break

    raise Exception(f"Não foi possível encontrar o elemento {value} após {max_attempts} tentativas.")



def show_success_popup():

    root = tk.Tk()

    root.withdraw()  # Esconde a janela principal

    messagebox.showinfo("Sucesso", "A operação foi executada com sucesso!")

    root.destroy()



def close_workbook(workbook):

    try:

        workbook.close()

        print("Arquivo Excel fechado com sucesso.")

    except Exception as e:

        print(f"Erro ao fechar o arquivo Excel: {e}")



def execute_javascript_with_retry(driver, script, max_attempts=3, refresh_delay=10, retry_delay=5):

    attempts = 0

    while attempts < max_attempts:

        try:

            driver.execute_script(script)

            #print("Script JavaScript executado com sucesso.")

            return True

        except JavascriptException as js_error:

            print(f"Erro ao executar script JavaScript: {js_error}. Tentando novamente em {retry_delay} segundos...")

            time.sleep(retry_delay)

        except NoSuchElementException:

            print("Elemento não encontrado, mas continuando a execução.")

            return False

        except Exception as e:

            print(f"Ocorreu um erro: {e}. Atualizando a página e repetindo operação em {refresh_delay} segundos.")

            driver.refresh()

            time.sleep(refresh_delay)



        attempts += 1



    print(f"Falha ao executar o script após {max_attempts} tentativas.")

    return False



def verificar_mensagem_operacao(driver, worksheet, linha):

    mensagens = {

        "/html/body/div[1]/div[2]/form[1]/div[2]/ul/li": [

            "A operação foi executada com sucesso."

        ],

        "/html/body/div[1]/div[2]/ul/li": [

            "Domínio não existe.",

            "Ocorreu um erro de comunicação. Aguarde alguns minutos e tente novamente.",

            "A Data de Validade não deve ser superior a Data de Validade da credencial do usuário emissor.",

            "Gestor de Acesso só pode atribuir acesso no seu próprio domínio ou domínio abaixo de sua abrangência.",

            "Não é permitido dar uma autorização a si mesmo."

        ]

    }



    for xpath, textos_esperados in mensagens.items():

        try:

            elements = driver.find_elements(By.XPATH, xpath)

            if len(elements) == 1 and elements[0].text in textos_esperados:

                mensagem = elements[0].text

                print(mensagem)

                worksheet.cell(row=linha, column=8).value = mensagem

                return True

        except:

            continue



    return False



def element_exists(driver, xpath, max_attempts=2, delay=1):

    """Verifica se um elemento existe na página usando JavaScript, com retentativas."""

    js_script = """

        return document.evaluate(

            arguments[0],

            document,

            null,

            XPathResult.FIRST_ORDERED_NODE_TYPE,

            null

        ).singleNodeValue !== null;

    """

    attempts = 0

    while attempts < max_attempts:

        if driver.execute_script(js_script, xpath):

            return True

        attempts += 1

        time.sleep(delay)

    return False



def check_element_with_retry(driver, xpath, max_attempts=3, delay=1):

    """Verifica a presença de um elemento usando JavaScript, com retentativas."""

    js_script = """

        return document.evaluate(

            arguments[0],

            document,

            null,

            XPathResult.FIRST_ORDERED_NODE_TYPE,

            null

        ).singleNodeValue;

    """

    attempts = 0

    while attempts < max_attempts:

        try:

            element = driver.execute_script(js_script, xpath)

            if element:

                # Converter o elemento retornado pelo JavaScript em um WebElement do Selenium

                web_element = driver.find_element(By.XPATH, xpath)

                return web_element.text

        except Exception as e:

            print(f"Erro ao executar script JavaScript: {e}. Tentando novamente em {delay} segundo(s)...")

        attempts += 1

        time.sleep(delay)

    return None



def run_automation_gerid(file_path, update_label_func=None, update_status_func=None, stop_event=None):

    workbook = openpyxl.load_workbook(file_path)

    worksheet = workbook.active

    processo_manager = GeridProcessoManager()

    processo_manager.inicializar_contagem(worksheet)

    service = Service(ChromeDriverManager().install())

    driver = webdriver.Chrome(service=service)

    Finaliza = True

   

    try:

        linha = 2

        coluna = 3

        driver.get("https://geridinss.dataprev.gov.br/gpa")

        driver.implicitly_wait(10)

        driver.maximize_window()

        print(f"Aguardando procedimento de Login...")

        WebDriverWait(driver, 300).until(EC.presence_of_element_located((By.XPATH, "/html/body/div[1]/div[2]/ul/li")))

        print(f"Login realizado com sucesso.")

        success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

        if success:

            print("O botão foi clicado com sucesso.")

        else:

            print("Não foi possível clicar no botão após várias tentativas.")

        if update_status_func:

            update_status_func("Processando registros...")

       

        while Finaliza and not stop_event.is_set():

            try:

                if stop_event and stop_event.is_set():

                    print("Interrupção solicitada, finalizando...")

                    break

                servidor = worksheet.cell(row=linha, column=1).value

                UO = worksheet.cell(row=linha, column=2).value

                Sistema = worksheet.cell(row=linha, column=coluna).value

                Subsistema = worksheet.cell(row=linha, column=coluna + 1).value

                Papel = worksheet.cell(row=linha, column=coluna + 2).value

                TipoUO = worksheet.cell(row=linha, column=coluna + 3).value

                validade = worksheet.cell(row=linha, column=coluna + 4).value

                if validade:

                    validade_str = validade.strftime("%d/%m/%Y")

                Situacao = worksheet.cell(row=linha, column=coluna + 5).value

                if not servidor:

                    try:

                        workbook.save(file_path)

                        print("Arquivo salvo com sucesso.")

                        close_workbook(workbook)

                    except Exception as e:

                        print(f"Erro ao salvar ou fechar o arquivo: {e}")

                    finally:

                        driver.quit()

                        print("Final!")

                        show_success_popup()

                        return

               



                if Situacao is not None:

                    linha += 1

                    if update_label_func:

                        update_label_func(linha)

                    continue







                if update_label_func:

                    update_label_func(linha)







                print("==============================================================")

                print(f"{linha}:{servidor}-{UO}-{Sistema}-{Subsistema}-{Papel}-{validade}")

                driver.get("https://geridinss.dataprev.gov.br/gpa")

                tempo_inicio = datetime.now()

                time.sleep(2)

                success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                if success:

                    pass

                else:

                    print("Não foi possível clicar no botão após várias tentativas.")

                    time.sleep(5)

                    continue

                sistema_label_xpath = "/html/body/div[1]/div[2]/form[1]/fieldset/div[1]/label/span"

                try:

                    sistema_label = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH, sistema_label_xpath)))

                    try:

                        Select(safe_find_element(driver, By.ID, "form:sistema")).select_by_visible_text(Sistema)

                    except (NoSuchElementException, ElementNotInteractableException):

                        print("Sistema não localizado dentre as opções disponíveis.")

                        worksheet.cell(row=linha, column=8).value = "Sistema não localizado dentre as opções disponíveis."

                        linha += 1

                        continue

                except TimeoutException:

                    driver.get("https://geridinss.dataprev.gov.br/gpa")

                    success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                    if success:

                        pass

                    else:

                        print("Não foi possível clicar no botão após várias tentativas.")

                    continue

                try:

                    Select(safe_find_element(driver, By.ID, "form:subsistema")).select_by_visible_text(Subsistema)

                    Select(safe_find_element(driver, By.ID, "form:papel")).select_by_visible_text(Papel)

                    Select(safe_find_element(driver, By.ID, "form:tipoDominio")).select_by_visible_text(TipoUO)

                    driver.find_element(By.ID, "form:dominio").clear()

                    driver.find_element(By.ID, "form:dominio").send_keys(UO)

                    driver.find_element(By.ID, "form:usuario").clear()

                    driver.find_element(By.ID, "form:usuario").send_keys(servidor)

                    driver.find_element(By.ID, "form:filtrar").click()

                    time.sleep(1)

                except (NoSuchElementException, ElementNotInteractableException) as e:

                    print(f"Erro ao interagir com elementos da página: {e}")

                    print("Atualizando a página e tentando novamente...")

                    driver.get("https://geridinss.dataprev.gov.br/gpa")

                    time.sleep(5)

                    continue

                xpath = "/html/body/div[1]/div[2]/ul/li"

                js_script = """

                    return document.evaluate(

                        arguments[0],

                        document,

                        null,

                        XPathResult.FIRST_ORDERED_NODE_TYPE,

                        null

                    ).singleNodeValue !== null;

                """

                try:

                    elemento_existe = driver.execute_script(js_script, xpath)

                    if elemento_existe:

                        print("Erro de comunicação detectado. Aguardando e tentando novamente...")

                        driver.get("https://geridinss.dataprev.gov.br/gpa")

                        execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                        continue

                except:

                    pass

                try:





                    if element_exists(driver, "/html/body/div[1]/div[2]/form[2]/table/tbody/tr/td[7]"):

                        element = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "/html/body/div[1]/div[2]/form[2]/table/tbody/tr/td[7]")))

                        data_string = driver.find_element(By.XPATH, "/html/body/div[1]/div[2]/form[2]/table/tbody/tr/td[7]").text

                        data = datetime.strptime(data_string, "%d/%m/%Y")

                        validade_formatada = validade.strftime("%d/%m/%Y")

                        data_formatada = data.strftime("%d/%m/%Y")

                        print("Data de validade informada:", validade_formatada)

                        print("Data de validade atual:", data_formatada)

                        data_string_dt = datetime.strptime(data_string, "%d/%m/%Y")

                        try:

                            workbook.save(file_path)

                        except Exception as e:

                            print(f"Erro ao salvar o arquivo: {e}")





                        # if data_string_dt < validade:

                        #     print("A data extraída do gerid é menor que a data informada. Avançando para revalidação...")

                        #     driver.find_element(By.ID, "dataTableCredencial:selected").click()

                        #     driver.find_element(By.ID, "form2:btAlterar").click()

                        #     driver.find_element(By.ID, "form2:dataValidade").send_keys(Keys.CONTROL, 'a')

                        #     validade_str = validade.strftime("%d/%m/%Y")

                        #     driver.find_element(By.ID, "form2:dataValidade").send_keys(validade_str)

                        #     driver.find_element(By.ID, "form2:confirmar").click()

                        #     sucesso, nova_coluna = verificar_mensagem_operacao(driver, worksheet, linha, coluna)

                        #     if sucesso:

                        #         coluna = nova_coluna

                        #         continue

                        #     tempo_fim = datetime.now()

                        #     processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                        #     if update_status_func:

                        #         update_status_func(processo_manager.get_status(linha))

                        #     try:

                        #         workbook.save(file_path)

                        #     except Exception as e:

                        #         print(f"Erro ao salvar o arquivo: {e}")

                        # else:

                        #     worksheet.cell(row=linha, column=coluna + 5).value = f"Sistema já revalidado ({validade.strftime('%d/%m/%Y')})"

                        #     print(f"Sistema já revalidado ({validade.strftime('%d/%m/%Y')})")

                        #     tempo_fim = datetime.now()

                        #     processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                        #     if update_status_func:

                        #         update_status_func(processo_manager.get_status(linha))

                        #     try:

                        #         workbook.save(file_path)

                        #     except Exception as e:

                        #         print(f"Erro ao salvar o arquivo: {e}")

                   

                   

                        #print("A data extraída do gerid é menor que a data informada. Avançando para revalidação...")

                       

                        if data_string_dt < validade:

                            driver.find_element(By.ID, "dataTableCredencial:selected").click()

                            driver.find_element(By.ID, "form2:btAlterar").click()

                            driver.find_element(By.ID, "form2:dataValidade").send_keys(Keys.CONTROL, 'a')

                            validade_str = validade.strftime("%d/%m/%Y")

                            driver.find_element(By.ID, "form2:dataValidade").send_keys(validade_str)

                            driver.find_element(By.ID, "form2:confirmar").click()

                            sucesso = verificar_mensagem_operacao(driver, worksheet, linha)

                            if sucesso:

                                linha += 1              

                                pass

                            else:

                                print("Erro - Repetindo operação!")

                                continue

                            tempo_fim = datetime.now()



                            processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                            if update_status_func:

                                update_status_func(processo_manager.get_status(linha))

                            try:

                                workbook.save(file_path)

                            except Exception as e:

                                print(f"Erro ao salvar o arquivo: {e}")

                        else:

                            worksheet.cell(row=linha, column=coluna + 5).value = f"Sistema já revalidado ({validade.strftime('%d/%m/%Y')})"

                            print(f"Sistema já revalidado ({validade.strftime('%d/%m/%Y')})")

                            tempo_fim = datetime.now()

                            processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                            driver.get("https://geridinss.dataprev.gov.br/gpa")

                            time.sleep(3)

                            success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                            linha += 1

                            continue





                   

                    else:

                        def retry_on_stale_element(func, *args, max_attempts=5, delay=1):

                            """Tenta executar uma função e repete em caso de StaleElementReferenceException."""

                            attempts = 0

                            while attempts < max_attempts:

                                try:

                                    return func(*args)

                                except StaleElementReferenceException:

                                    attempts += 1

                                    print(f"StaleElementReferenceException ocorreu. Tentativa {attempts} de {max_attempts}.")

                                    time.sleep(delay)

                            raise Exception(f"Não foi possível executar a ação após {max_attempts} tentativas.")



                        # Exemplo de uso da função retry_on_stale_element

                        def safe_interaction(driver, by, value, action):

                            """Interage com um elemento de forma segura, repetindo em caso de StaleElementReferenceException."""

                            def interaction():

                                element = driver.find_element(by, value)

                                action(element)

                            retry_on_stale_element(interaction)



                        # Aplicando a lógica no trecho do código

                        if element_exists(driver, "/html/body/div[1]/div[2]/form[1]/div[2]/ul/li"):

                            print("Atribuindo novo acesso....")

                            try:

                                # Clicar no botão "Novo"

                                retry_on_stale_element(lambda: driver.find_element(By.ID, "form2:novo").click())

                                time.sleep(2)

                                # Selecionar Sistema

                                retry_on_stale_element(lambda: Select(safe_find_element(driver, By.ID, "form:sistema")).select_by_visible_text(Sistema))



                                # Selecionar Subsistema

                                retry_on_stale_element(lambda: Select(safe_find_element(driver, By.ID, "form:subsistema")).select_by_visible_text(Subsistema))



                                # Selecionar Papel

                                retry_on_stale_element(lambda: Select(safe_find_element(driver, By.ID, "form2:papel")).select_by_visible_text(Papel))



                                # Selecionar Tipo de Domínio

                                retry_on_stale_element(lambda: Select(safe_find_element(driver, By.ID, "form2:tipoDominio")).select_by_visible_text(TipoUO))



                                # Preencher Domínio

                                def fill_dominio(element):

                                    element.clear()

                                    element.send_keys(UO)

                                safe_interaction(driver, By.ID, "form2:dominio", fill_dominio)



                                # Preencher Usuário

                                def fill_usuario(element):

                                    element.click()

                                    element.clear()

                                    element.send_keys(servidor)

                                safe_interaction(driver, By.ID, "form2:usuario", fill_usuario)



                                # Preencher Data de Validade

                                def fill_data_validade(element):

                                    element.click()

                                    element.clear()

                                    element.send_keys(Keys.CONTROL, 'a')

                                    validade_str = validade.strftime("%d/%m/%Y")

                                    element.send_keys(validade_str)

                                safe_interaction(driver, By.ID, "form2:dataValidade", fill_data_validade)



                                # Selecionar Períodos

                                for periodo in ["form2:periodo:0", "form2:periodo:6", "form2:periodo:7"]:

                                    retry_on_stale_element(lambda: safe_find_element(driver, By.ID, periodo).click())



                                # Preencher Hora de Início

                                def fill_hora_inicio(element):

                                    element.click()

                                    element.send_keys(Keys.CONTROL, 'a')

                                    element.send_keys("0000")

                                safe_interaction(driver, By.ID, "form2:horaAcessoInicio", fill_hora_inicio)



                                # Preencher Hora de Fim

                                def fill_hora_fim(element):

                                    element.click()

                                    element.send_keys(Keys.CONTROL, 'a')

                                    element.send_keys("2359")

                                safe_interaction(driver, By.ID, "form2:horaAcessoFim", fill_hora_fim)



                                # Clicar em Confirmar

                                retry_on_stale_element(lambda: safe_find_element(driver, By.ID, "form2:confirmar").click())



                                # Verificar mensagem de sucesso

                                mensagem = check_element_with_retry(driver, "/html/body/div[1]/div[2]/ul/li")

                                if mensagem:

                                    print(mensagem)

                                    worksheet.cell(row=linha, column=8).value = mensagem



                                # Verificar mensagem de sucesso novamente

                                mensagem_sucesso = check_element_with_retry(driver, "/html/body/div[1]/div[2]/form[1]/div[2]/ul/li")

                                if mensagem_sucesso:

                                    print(mensagem_sucesso)

                                    worksheet.cell(row=linha, column=8).value = mensagem_sucesso



                                print(f"Acesso: {UO} - {Sistema} - {Subsistema} - {Papel} - {servidor} - {validade_str}")



                                try:

                                    workbook.save(file_path)

                                except Exception as e:

                                    print(f"Erro ao salvar o arquivo: {e}")



                                tempo_fim = datetime.now()

                                processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                                if update_status_func:

                                    update_status_func(processo_manager.get_status(linha))

                                linha += 1

                                continue

                            except Exception as e:

                                print(f"Erro ao atribuir novo acesso repetindo operação: {e}")

                                driver.get("https://geridinss.dataprev.gov.br/gpa")

                                time.sleep(3)

                                success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                                if success:

                                    print("O botão foi clicado com sucesso.")

                                else:

                                    print("Não foi possível clicar no botão após várias tentativas.")

                                continue







                except Exception as e:

                    print(f"Erro inesperado: {e}")

                    print("Tentando recuperar e continuar...")

                    driver.get("https://geridinss.dataprev.gov.br/gpa")

                    time.sleep(3)

                    success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                    if success:

                        print("O botão foi clicado com sucesso.")

                    else:

                        print("Não foi possível clicar no botão após várias tentativas.")

                    time.sleep(5)

                    continue

            except Exception as e:

                if stop_event.is_set():

                    break

                tempo_fim = datetime.now()

                processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                if update_status_func:

                    update_status_func(processo_manager.get_status(linha))

                print(f"Erro inesperado: {e}")

                print("Tentando recuperar e continuar...")

                driver.get("https://geridinss.dataprev.gov.br/gpa")

                time.sleep(3)

                success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                if success:

                    print("O botão foi clicado com sucesso.")

                else:

                    print("Não foi possível clicar no botão após várias tentativas.")

                time.sleep(5)

                continue

        print("==== FIM ====")

    except Exception as e:

        print(f"Erro geral: {e}")

        if update_status_func:

            update_status_func("Erro durante a execução...")

    finally:

        driver.quit()

        print("Driver encerrado com sucesso.")

        if stop_event.is_set():

            if update_status_func:

                update_status_func("Operação interrompida pelo usuário")

    if update_status_func:

        update_status_func("Execução finalizada.")



def run_automation_thread(file_path, update_label_func=None, update_status_func=None, stop_event=None):

    thread = threading.Thread(target=run_automation_gerid, args=(file_path, update_label_func, update_status_func, stop_event))

    thread.start()

    return thread





Diante disso me ajude a implementar essa melhoria no meu código, vamos passo a passo com cautela a fim de evitar erros..





#! /usr/bin/env python

#  -*- coding: utf-8 -*-

#

# GUI module generated by PAGE version 5.1

#  in conjunction with Tcl version 8.6

#    Dec 30, 2024 05:30:36 PM -03  platform: Windows NT



import sys

import threading

# --- START CUSTOM CODE ---

import tkinter as tk

from tkinter import ttk



from excel_import import import_excel

from gerid import run_automation_gerid

from saggestao_servidores import run_automation_thread_saggestao

from saggestao_transbordo import run_automation_thread_saggestao_transbordo

import requests

from tkinter import messagebox

import json

import bot_gerid_support

import os







def get_github_message():

    try:

        # URL do arquivo raw no GitHub contendo a mensagem

        url = "https://raw.githubusercontent.com/Raos48/RoboGerid/refs/heads/main/message.json"

        response = requests.get(url)

        response.raise_for_status()  # Levanta uma exceção para erros HTTP

        data = json.loads(response.text)

        return data.get("message"), data.get("block_execution", False)

    except Exception as e:

        print(f"Erro ao obter mensagem do GitHub: {e}")

        return None, False



def truncate_message(message, max_length=100):

    if len(message) > max_length:

        return message[:max_length] + "..."

    return message





def show_popup(message, block_execution):

    if block_execution:

        messagebox.showerror("Execução Bloqueada", message)

        sys.exit()

    else:

        messagebox.showinfo("Mensagem", message)





def run_automation_thread(file_path, update_label_func=None, update_status_func=None,stop_event=None):

    thread = threading.Thread(target=run_automation_gerid, args=(file_path, update_label_func, update_status_func, stop_event))

    thread.start()

    return thread  # Retorna a thread para que possamos acompanhar seu estado



def vp_start_gui():

    global val, w, root

   

    message, block_execution = get_github_message()

    if message:

        show_popup(message, block_execution)

   

    if block_execution:

        return  # Encerra a execução se estiver bloqueada

   

    root = tk.Tk()

    bot_gerid_support.set_Tk_var()

    top = Toplevel1(root)

    bot_gerid_support.init(root, top)

    root.mainloop()



w = None

def create_Toplevel1(rt, *args, **kwargs):

    '''Starting point when module is imported by another module.

       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''

    global w, w_win, root

    root = rt

    w = tk.Toplevel(root)

    bot_gerid_support.set_Tk_var()

    top = Toplevel1(w)

    bot_gerid_support.init(w, top, *args, **kwargs)

    return (w, top)



def destroy_Toplevel1():

    global w

    w.destroy()

    w = None



class Toplevel1:

    def __init__(self, top=None):

        '''This class configures and populates the toplevel window.

           top is the toplevel containing window.'''

        self.top = top

       

        self.automation_thread = None

        self.should_stop = False

        self.stop_event = threading.Event()

       

       

       

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'

        _fgcolor = '#000000'  # X11 color: 'black'

        _compcolor = '#d9d9d9' # X11 color: 'gray85'

        _ana1color = '#d9d9d9' # X11 color: 'gray85'

        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        self.style = ttk.Style()

        if sys.platform == "win32":

            self.style.theme_use('winnative')

        self.style.configure('.',background=_bgcolor)

        self.style.configure('.',foreground=_fgcolor)

        self.style.configure('.',font="TkDefaultFont")

        self.style.map('.',background=

            [('selected', _compcolor), ('active',_ana2color)])



        top.geometry("647x515+559+201")

        top.minsize(120, 1)

        top.maxsize(3524, 1063)

        top.resizable(1, 1)

        top.title("Bot GERID e SAGGESTAO")

        top.configure(borderwidth="2")

        top.configure(background="#d9d9d9")

        top.configure(highlightbackground="#d9d9d9")

        top.configure(highlightcolor="black")



        # Registros processados========================================

        self.Labelframe2 = tk.LabelFrame(top)

        self.Labelframe2.place(x=10, y=10, width=150, height=56, bordermode='ignore')

        self.Labelframe2.configure(relief='groove')

        self.Labelframe2.configure(foreground="black")

        self.Labelframe2.configure(text='''Registros processados.''')

        self.Labelframe2.configure(background="#d9d9d9")

        self.Labelframe2.configure(highlightbackground="#d9d9d9")

        self.Labelframe2.configure(highlightcolor="black")

        # --------------

        self.Label2 = tk.Label(self.Labelframe2)

        self.Label2.place(x=20, y=20, height=30, width=30, bordermode='ignore')

        self.Label2.configure(activebackground="#000000")  # Fundo preto

        self.Label2.configure(activeforeground="green")  # Fonte verde

        self.Label2.configure(background="#000000")  # Fundo preto

        self.Label2.configure(disabledforeground="#a3a3a3")

        self.Label2.configure(font="-family {Verdana} -size 10 -weight bold")  # Reduzindo o tamanho da fonte

        self.Label2.configure(foreground="#32CD32")  # Cor verde limão

        self.Label2.configure(highlightbackground="#000000")

        self.Label2.configure(highlightcolor="black")

        self.Label2.configure(text='''0''')

        # Registros processados========================================



        # SELECT FUNCIONALIDADE========================================

        self.Labelframe1 = tk.LabelFrame(top)

        self.Labelframe1.place(x=170, y=10, width=363, height=56)

        self.Labelframe1.configure(relief='groove')

        self.Labelframe1.configure(foreground="black")

        self.Labelframe1.configure(text='''Selecione a funcionalidade desejada.''')

        self.Labelframe1.configure(background="#d9d9d9")

        self.Labelframe1.configure(highlightbackground="#d9d9d9")

        self.Labelframe1.configure(highlightcolor="black")

        # --------------

        self.TCombobox1 = ttk.Combobox(self.Labelframe1)

        self.TCombobox1.place(x=10, y=20, width=333, height=27, bordermode='ignore')

        self.TCombobox1.configure(state='readonly')

        self.TCombobox1.configure(textvariable=bot_gerid_support.combobox)

        self.TCombobox1.configure(foreground="#000000")

        self.TCombobox1.configure(takefocus="")

        self.TCombobox1['values'] = ['Atribuição e Revalidação Acessos GERID', 'Configuração de Perfis SAGGESTÃO','Configuração de Unidades SAGGESTÃO']

        self.TCombobox1.current(0)  # Define a primeira opção como padrão

        # SELECT FUNCIONALIDADE========================================



        # SELECT INSTANCIAS=================================================

        self.Labelframe3 = tk.LabelFrame(top)

        self.Labelframe3.place(x=540, y=10, height=55, width=80)

        self.Labelframe3.configure(relief='groove')

        self.Labelframe3.configure(foreground="black")

        self.Labelframe3.configure(text='''Instâncias''')

        self.Labelframe3.configure(background="#d9d9d9")

        self.Labelframe3.configure(highlightbackground="#d9d9d9")

        self.Labelframe3.configure(highlightcolor="black")

        self.Spinbox1 = tk.Spinbox(top, from_=1.0, to=100.0)



        self.Spinbox1.place(x=560, y=30, height=21, width=48)

        self.Spinbox1.configure(activebackground="#f9f9f9")

        self.Spinbox1.configure(background="white")

        self.Spinbox1.configure(buttonbackground="#d9d9d9")

        self.Spinbox1.configure(disabledforeground="#a3a3a3")

        self.Spinbox1.configure(font="TkDefaultFont")

        self.Spinbox1.configure(foreground="black")

        self.Spinbox1.configure(highlightbackground="black")

        self.Spinbox1.configure(highlightcolor="black")

        self.Spinbox1.configure(insertbackground="black")

        self.Spinbox1.configure(selectbackground="#c4c4c4")

        self.Spinbox1.configure(selectforeground="black")

        self.Spinbox1.configure(takefocus="0")

        self.Spinbox1.configure(textvariable=bot_gerid_support.spinbox)

        # INSTANCIAS=================================================



        # IMPORTAR ARQUIVO DE CONFIGURAÇÃO=========================

        self.Importar_Arquivo_de_Configuração = tk.LabelFrame(top)

        self.Importar_Arquivo_de_Configuração.place(x=10, y=60, width=615, height=62, bordermode='ignore')

        self.Importar_Arquivo_de_Configuração.configure(relief='groove')

        self.Importar_Arquivo_de_Configuração.configure(foreground="black")

        self.Importar_Arquivo_de_Configuração.configure(text='''Importar arquivo de configuração.''')

        self.Importar_Arquivo_de_Configuração.configure(background="#d9d9d9")

        self.Importar_Arquivo_de_Configuração.configure(highlightbackground="#d9d9d9")

        self.Importar_Arquivo_de_Configuração.configure(highlightcolor="black")



        self.Label1 = tk.Label(self.Importar_Arquivo_de_Configuração)

        self.Label1.place(x=100, y=30, height=23, width=497, bordermode='ignore')

        self.Label1.configure(activebackground="#f9f9f9")

        self.Label1.configure(activeforeground="black")

        self.Label1.configure(anchor='sw')

        self.Label1.configure(background="#d9d9d9")

        self.Label1.configure(borderwidth="1")

        self.Label1.configure(compound='left')

        self.Label1.configure(disabledforeground="#a3a3a3")

        self.Label1.configure(font="-family {Segoe UI} -size 10 -underline 1")

        self.Label1.configure(foreground="#004080")

        self.Label1.configure(highlightbackground="#d9d9d9")

        self.Label1.configure(highlightcolor="black")

        self.Label1.configure(justify='left')

        self.Label1.configure(relief="sunken")

        self.Label1.configure(text='''Nome do Arquivo.''')



        self.TButton1 = ttk.Button(self.Importar_Arquivo_de_Configuração)

        self.TButton1.place(x=10, y=30, height=27, width=77, bordermode='ignore')

        self.TButton1.configure(takefocus="")

        self.TButton1.configure(text='''Importar''')

        self.TButton1.configure(command=self.import_file)

        # IMPORTAR ARQUIVO DE CONFIGURAÇÃO=========================



        # EXECUTAR=================================================

        self.Frame1 = tk.Frame(top)

        self.Frame1.place(x=10, y=130,height=45, width=615)

        self.Frame1.configure(relief='groove')

        self.Frame1.configure(borderwidth="2")

        self.Frame1.configure(relief="groove")

        self.Frame1.configure(background="#d9d9d9")

        self.Frame1.configure(highlightbackground="#d9d9d9")

        self.Frame1.configure(highlightcolor="black")



        self.Button2 = tk.Button(self.Frame1)

        self.Button2.place(x=530, y=10, height=28, width=68)

        self.Button2.configure(activebackground="#ececec")

        self.Button2.configure(activeforeground="#000000")

        self.Button2.configure(background="#00f47a")

        self.Button2.configure(disabledforeground="#a3a3a3")

        self.Button2.configure(foreground="#000000")

        self.Button2.configure(highlightbackground="#d9d9d9")

        self.Button2.configure(highlightcolor="black")

        self.Button2.configure(pady="0")

        self.Button2.configure(takefocus="0")

        self.Button2.configure(text='''Executar''')        

        self.Button2.configure(command=self.run_selected_automation)



        # self.TProgressbar1 = ttk.Progressbar(top)

        # self.TProgressbar1.place(x=20, y=140,height=22, width=410)

        # self.TProgressbar1.configure(length="100")

        # self.TProgressbar1.configure(takefocus="0")

        # BARRA DE PROGRESSO ======================================







        # LABEL ==================================================

        # self.newLabel = tk.Label(top)

        # self.newLabel.place(x=20, y=140, height=22, width=410)

        # self.newLabel.configure(activebackground="#d9d9d9")

        # self.newLabel.configure(activeforeground="black")

        # self.newLabel.configure(background="#d9d9d9")

        # self.newLabel.configure(disabledforeground="#a3a3a3")

        # self.newLabel.configure(font="-family {Verdana} -size  -weight bold")

        # self.newLabel.configure(foreground="#32CD32")  # Cor verde limão

        # self.newLabel.configure(highlightbackground="#d9d9d9")

        # self.newLabel.configure(highlightcolor="black")

        # self.newLabel.configure(text='''Novo elemento informativo''')





        self.footerLabel = tk.Label(top, text="Desenvolvido por Ricardo Alves", font="-family {Verdana} -size 8", bg=_bgcolor, fg=_fgcolor)

        self.footerLabel.place(x=20, y=140, height=22, width=200)

        # LABEL ==================================================







        # EXECUTAR=================================================



        # Frame para o terminal

        self.terminal_frame = ttk.Frame(top)

        self.terminal_frame.place(x=10, y=180, height=300, width=615)



        # Terminal

        self.terminal = tk.Text(self.terminal_frame, wrap=tk.WORD, bg='black', fg='white')

        self.terminal.pack(expand=True, fill='both')



        # Redirecionar a saída padrão e de erro para o terminal

        sys.stdout = self

        sys.stderr = self



        # Label para indicar o status da execução

        self.status_label = tk.Label(top)

        self.status_label.place(x=9, y=483, height=26, width=615)  # Reduzindo a largura

        self.status_label.configure(activebackground="#000000")  # Fundo preto

        self.status_label.configure(activeforeground="#ccff00")  # Fonte verde amarela brilhante

        self.status_label.configure(background="#000000")  # Fundo preto

        self.status_label.configure(disabledforeground="#a3a3a3")

        self.status_label.configure(font="-family {Verdana} -size 9")  # Removendo o negrito

        self.status_label.configure(foreground="#ccff00")  # Fonte verde amarela brilhante

        self.status_label.configure(highlightbackground="#000000")

        self.status_label.configure(highlightcolor="black")

        self.status_label.configure(text='''Aguardando execução...''')





        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)

        top.configure(menu = self.menubar)

       

        # Adicione este botão na seção Interromper===========================

        self.Button3 = tk.Button(self.Frame1)

        self.Button3.place(x=445, y=10, height=28, width=80)

        self.Button3.configure(activebackground="#ececec")

        self.Button3.configure(activeforeground="#000000")

        self.Button3.configure(background="#ff0000")

        self.Button3.configure(disabledforeground="#a3a3a3")

        self.Button3.configure(foreground="#000000")

        self.Button3.configure(highlightbackground="#d9d9d9")

        self.Button3.configure(highlightcolor="black")

        self.Button3.configure(pady="0")

        self.Button3.configure(takefocus="0")

        self.Button3.configure(text='''Interromper''')

        self.Button3.configure(command=self.stop_automation)



    def stop_automation(self):

        if self.automation_thread and self.automation_thread.is_alive():

            self.should_stop = True

            self.stop_event.set()

            print("Solicitação de interrupção recebida...")

            self.status_label.configure(text="Interrompendo...")

            # Fecha o navegador se estiver aberto

            if hasattr(self, 'driver'):

                try:

                    self.driver.quit()

                except Exception as e:

                    print(f"Erro ao fechar o navegador: {e}")

       

        self.status_label.configure(text="Operação interrompida pelo usuário")

        self.Button3.configure(state='disabled')

        self.Button2.configure(state='normal')  



   

    def run_selected_automation(self):

        selected_option = self.TCombobox1.get()

        if selected_option == 'Atribuição e Revalidação Acessos GERID':

            self.run_automation_gerid()

        elif selected_option == 'Configuração de Perfis SAGGESTÃO':

            self.run_automation_saggestao()

        elif selected_option == 'Configuração de Unidades SAGGESTÃO':

            self.run_automation_saggestao_transbordo()

        else:

            print("Opção inválida selecionada.")

   

   

    def run_automation_gerid(self):

        if self.file_path:

            self.stop_event.clear()

            self.should_stop = False

            self.automation_thread = run_automation_thread(

                self.file_path,

                self.update_label,

                self.update_status,

                self.stop_event  # Passe o evento de parada

            )

        else:

            print("Por favor, importe um arquivo Excel primeiro.")



    def run_automation_saggestao(self):

        if self.file_path:  

            self.automation_thread = run_automation_thread_saggestao(

                self.file_path,

                self.update_label,

                self.update_status,

                self.stop_event  # Adicione este parâmetro

            )

            print("Executando a automação para Configuração de Perfis SAGGESTÃO.")

        else:

            print("Por favor, importe um arquivo Excel primeiro.")

           

           

    def run_automation_saggestao_transbordo(self):

        if self.file_path:  

            self.automation_thread = run_automation_thread_saggestao_transbordo(

                self.file_path,

                self.update_label,

                self.update_status,

                self.stop_event  # Adicione este parâmetro

            )

            print("Executando a automação para Configuração de TRANSBORDO de Unidades.")

        else:

            print("Por favor, importe um arquivo Excel primeiro.")

   

    def write(self, txt):

        if not self.stop_event.is_set():

            # Configure as tags de cor se ainda não existirem

            if not hasattr(self, 'tags_configured'):

                self.terminal.tag_configure('success', foreground='#00FF00')  # Verde brilhante

                self.terminal.tag_configure('error', foreground='#FFFF00')    # Amarelo

                self.tags_configured = True

           

            # Verificar se é uma mensagem de sucesso

            if "A operação foi executada com sucesso" in txt:

                self.terminal.insert(tk.END, txt, 'success')

            # Verificar se é uma mensagem de erro (qualquer mensagem da lista de erros)

            elif any(error_msg in txt for error_msg in [

                "Domínio não existe",

                "Ocorreu um erro de comunicação",

                "A Data de Validade não deve ser superior",

                "Gestor de Acesso só pode atribuir acesso",

                "Não é permitido dar uma autorização a si mesmo",

                "Erro",

                "erro"

            ]):

                self.terminal.insert(tk.END, txt, 'error')

            else:

                # Texto normal em branco (padrão)

                self.terminal.insert(tk.END, txt)

           

            self.terminal.see(tk.END)





    def flush(self):

        pass



    def run_automation(self):

        if self.file_path:

            self.automation_thread = run_automation_thread(self.file_path, self.update_label, self.update_status)

        else:

            print("Por favor, importe um arquivo Excel primeiro.")



    def import_file(self):

        try:

            self.workbook, self.sheet, self.file_path = import_excel()

            if self.file_path:                

                file_name = os.path.basename(self.file_path)

                self.Label1.configure(text=file_name)

        except Exception as e:

            print(f"Erro ao importar arquivo: {e}")



    def update_label(self, linha):

        self.Label2.configure(text=str(linha - 1))



    def update_status(self, status):

        # Remover os segundos da mensagem de status

        if "em" in status:

            status_parts = status.split("em")

            if len(status_parts) > 1:

                time_part = status_parts[1].strip()

                time_without_seconds = ":".join(time_part.split(":")[:2])

                status = status_parts[0] + " em " + time_without_seconds

        # Truncar a mensagem se for muito longa

        status = truncate_message(status)

        self.status_label.configure(text=status)



    def on_closing(self):

        self.stop_automation()

        if self.automation_thread and self.automation_thread.is_alive():

            self.automation_thread.join(timeout=5)

        self.top.destroy()



if __name__ == '__main__':

    vp_start_gui()







import queue

import subprocess

import threading

import time

import tkinter as tk

from datetime import datetime

from tkinter import messagebox



import openpyxl

import pyotp

from selenium import webdriver

from selenium.common.exceptions import (ElementNotInteractableException,

                                        JavascriptException,

                                        NoSuchElementException, StaleElementReferenceException,

                                        TimeoutException)

from selenium.webdriver.chrome.service import Service

from selenium.webdriver.common.by import By

from selenium.webdriver.common.keys import Keys

from selenium.webdriver.support import expected_conditions as EC

from selenium.webdriver.support.ui import Select, WebDriverWait

from webdriver_manager.chrome import ChromeDriverManager

import statistics

from datetime import datetime, timedelta

import os

import json

import numpy as np

from collections import deque



class GeridProcessoManager:

    def __init__(self, janela_movel=10):

        self.tempos_processamento = []

        self.tempos_movel = deque(maxlen=janela_movel)  # Últimos N tempos para média móvel

        self.total_registros = 0

        self.registros_processados = 0

        self.tempo_inicio_total = None

        self.janela_movel = janela_movel

        self.worksheet = None  # Adicionado para armazenar a referência à planilha



    def inicializar_contagem(self, worksheet):

        """Conta quantos registros precisam ser processados."""

        self.total_registros = 0

        linha = 2

        self.worksheet = worksheet  # Armazena referência à planilha para usar depois



        while worksheet.cell(row=linha, column=1).value is not None:

            if worksheet.cell(row=linha, column=8).value is None:  # Coluna onde status é salvo

                self.total_registros += 1

            linha += 1

        self.tempo_inicio_total = datetime.now()



    def atualizar_total_registros(self, linha_atual):

        """Atualiza o número de registros restantes baseado na linha atual."""

        if self.worksheet is None:

            return



        registros_restantes = 0

        linha_temp = linha_atual



        while self.worksheet.cell(row=linha_temp, column=1).value is not None:

            if self.worksheet.cell(row=linha_temp, column=8).value is None:  # Coluna onde status é salvo

                registros_restantes += 1

            linha_temp += 1



        return registros_restantes



    def registrar_tempo(self, tempo_inicio, tempo_fim, linha_atual=None):

        """Registra o tempo de processamento de um registro."""

        tempo_processamento = (tempo_fim - tempo_inicio).total_seconds()

        self.tempos_processamento.append(tempo_processamento)

        self.tempos_movel.append(tempo_processamento)



        # Atualiza registros processados usando a linha atual, se fornecida

        if linha_atual and self.worksheet:

            registros_restantes = self.atualizar_total_registros(linha_atual)

            self.registros_processados = self.total_registros - registros_restantes

        else:

            self.registros_processados += 1



    def calcular_tendencia(self):

        """Calcula se o processamento está acelerando ou desacelerando."""

        if len(self.tempos_processamento) < 5:

            return None, 0

        # Comparar a média dos últimos registros com a média geral

        media_geral = statistics.mean(self.tempos_processamento)

        media_recente = statistics.mean(self.tempos_movel)

        diferenca_percentual = ((media_geral - media_recente) / media_geral) * 100

        if diferenca_percentual > 5:

            return "acelerando", diferenca_percentual

        elif diferenca_percentual < -5:

            return "desacelerando", diferenca_percentual

        else:

            return "estável", diferenca_percentual



    def calcular_tempo_estimado(self, linha_atual=None):

        """Calcula tempo estimado para finalizar o processamento com base nos tempos registrados."""

        if not self.tempos_processamento:

            return "Calculando...", None, None, None



        # Atualizar contagem de registros restantes se uma linha atual for fornecida

        if linha_atual and self.worksheet:

            registros_restantes = self.atualizar_total_registros(linha_atual)

        else:

            registros_restantes = self.total_registros - self.registros_processados



        # Usar a média móvel se tiver registros suficientes, senão usar a média geral

        if len(self.tempos_movel) >= min(3, self.janela_movel):

            tempo_medio = statistics.mean(self.tempos_movel)

        else:

            tempo_medio = statistics.mean(self.tempos_processamento)



        # Calcular estimativa com base na tendência

        tendencia, percentual = self.calcular_tendencia() if len(self.tempos_processamento) >= 5 else (None, 0)



        # Ajustar a estimativa de acordo com a tendência

        fator_ajuste = 1.0

        if tendencia == "acelerando":

            fator_ajuste = max(0.8, 1.0 - (abs(percentual) / 200))

        elif tendencia == "desacelerando":

            fator_ajuste = min(1.2, 1.0 + (abs(percentual) / 200))



        tempo_medio_ajustado = tempo_medio * fator_ajuste

        tempo_total_estimado = tempo_medio_ajustado * registros_restantes



        # Calcular horário previsto de conclusão

        agora = datetime.now()

        horario_conclusao = agora + timedelta(seconds=tempo_total_estimado)



        # Formatar tempo restante

        horas = int(tempo_total_estimado // 3600)

        minutos = int((tempo_total_estimado % 3600) // 60)

        segundos = int(tempo_total_estimado % 60)



        # Calcular progresso

        progresso = ((self.total_registros - registros_restantes) / self.total_registros * 100) if self.total_registros > 0 else 0



        # Formatar mensagem com base no tempo estimado

        if horas > 0:

            mensagem = f"Estimativa: {horas}h {minutos}min {segundos}s"

        elif minutos > 0:

            mensagem = f"Estimativa: {minutos}min {segundos}s"

        else:

            mensagem = f"Estimativa: {segundos}s"



        # Adicionar info de horário de conclusão

        horario_str = horario_conclusao.strftime("%H:%M:%S")

        data_str = horario_conclusao.strftime("%d/%m/%Y")

        hoje_str = agora.strftime("%d/%m/%Y")



        if data_str == hoje_str:

            mensagem += f" (Término às {horario_str})"

        else:

            mensagem += f" (Término em {data_str} às {horario_str})"



        return mensagem, tendencia, progresso, horario_conclusao



    def calcular_velocidade_media(self):

        """Calcula a velocidade média de processamento (registros por minuto)."""

        if not self.tempos_processamento:

            return 0

        tempo_medio_segundos = statistics.mean(self.tempos_processamento)

        if tempo_medio_segundos > 0:

            return 60 / tempo_medio_segundos  # registros por minuto

        return 0



    def calcular_tempo_decorrido(self):

        """Calcula o tempo decorrido desde o início do processamento."""

        if self.tempo_inicio_total:

            decorrido = datetime.now() - self.tempo_inicio_total

            horas = int(decorrido.total_seconds() // 3600)

            minutos = int((decorrido.total_seconds() % 3600) // 60)

            segundos = int(decorrido.total_seconds() % 60)

            if horas > 0:

                return f"{horas}h {minutos}min {segundos}s"

            elif minutos > 0:

                return f"{minutos}min {segundos}s"

            else:

                return f"{segundos}s"

        return "Desconhecido"



    def get_status(self, linha_atual=None):

        """Retorna o status atual do processamento com informações detalhadas."""

        tempo_estimado, tendencia, progresso, _ = self.calcular_tempo_estimado(linha_atual)



        if linha_atual and self.worksheet:

            registros_restantes = self.atualizar_total_registros(linha_atual)

            registros_processados = self.total_registros - registros_restantes

        else:

            registros_restantes = self.total_registros - self.registros_processados

            registros_processados = self.registros_processados



        velocidade = self.calcular_velocidade_media()

        tempo_decorrido = self.calcular_tempo_decorrido()



        # Construir mensagem de status

        status = f"{progresso:.1f}% ({registros_processados}/{self.total_registros}) | "

        status += f"{tempo_estimado} | Restantes: {registros_restantes} | "

        status += f"{velocidade:.1f} reg/min | Tempo decorrido: {tempo_decorrido}"



        # Adicionar informação de tendência se disponível

        if tendencia:

            status += f" | Processamento {tendencia}"

        return status



def safe_find_element(driver, by, value, max_attempts=5, delay=2):

    """Função para localizar um elemento de forma segura."""

    attempts = 0

    while attempts < max_attempts:

        try:

            return driver.find_element(by, value)

        except StaleElementReferenceException:

            print(f"StaleElementReferenceException ao tentar encontrar elemento {value}. Tentativa {attempts + 1} de {max_attempts}.")

            attempts += 1

            time.sleep(delay)

        except NoSuchElementException:

            print(f"Elemento {value} não encontrado.")

            break

    raise Exception(f"Não foi possível encontrar o elemento {value} após {max_attempts} tentativas.")



def show_success_popup():

    root = tk.Tk()

    root.withdraw()  # Esconde a janela principal

    messagebox.showinfo("Sucesso", "A operação foi executada com sucesso!")

    root.destroy()



def close_workbook(workbook):

    try:

        workbook.close()

        print("Arquivo Excel fechado com sucesso.")

    except Exception as e:

        print(f"Erro ao fechar o arquivo Excel: {e}")



def execute_javascript_with_retry(driver, script, max_attempts=3, refresh_delay=10, retry_delay=5):

    attempts = 0

    while attempts < max_attempts:

        try:

            driver.execute_script(script)

            #print("Script JavaScript executado com sucesso.")

            return True

        except JavascriptException as js_error:

            print(f"Erro ao executar script JavaScript: {js_error}. Tentando novamente em {retry_delay} segundos...")

            time.sleep(retry_delay)

        except NoSuchElementException:

            print("Elemento não encontrado, mas continuando a execução.")

            return False

        except Exception as e:

            print(f"Ocorreu um erro: {e}. Atualizando a página e repetindo operação em {refresh_delay} segundos.")

            driver.refresh()

            time.sleep(refresh_delay)



        attempts += 1



    print(f"Falha ao executar o script após {max_attempts} tentativas.")

    return False



def verificar_mensagem_operacao(driver, worksheet, linha):

    mensagens = {

        "/html/body/div[1]/div[2]/form[1]/div[2]/ul/li": [

            "A operação foi executada com sucesso."

        ],

        "/html/body/div[1]/div[2]/ul/li": [

            "Domínio não existe.",

            "Ocorreu um erro de comunicação. Aguarde alguns minutos e tente novamente.",

            "A Data de Validade não deve ser superior a Data de Validade da credencial do usuário emissor.",

            "Gestor de Acesso só pode atribuir acesso no seu próprio domínio ou domínio abaixo de sua abrangência.",

            "Não é permitido dar uma autorização a si mesmo."

        ]

    }



    for xpath, textos_esperados in mensagens.items():

        try:

            elements = driver.find_elements(By.XPATH, xpath)

            if len(elements) == 1 and elements[0].text in textos_esperados:

                mensagem = elements[0].text

                print(mensagem)

                worksheet.cell(row=linha, column=8).value = mensagem

                return True

        except:

            continue



    return False



def element_exists(driver, xpath, max_attempts=2, delay=1):

    """Verifica se um elemento existe na página usando JavaScript, com retentativas."""

    js_script = """

        return document.evaluate(

            arguments[0],

            document,

            null,

            XPathResult.FIRST_ORDERED_NODE_TYPE,

            null

        ).singleNodeValue !== null;

    """

    attempts = 0

    while attempts < max_attempts:

        if driver.execute_script(js_script, xpath):

            return True

        attempts += 1

        time.sleep(delay)

    return False



def check_element_with_retry(driver, xpath, max_attempts=3, delay=1):

    """Verifica a presença de um elemento usando JavaScript, com retentativas."""

    js_script = """

        return document.evaluate(

            arguments[0],

            document,

            null,

            XPathResult.FIRST_ORDERED_NODE_TYPE,

            null

        ).singleNodeValue;

    """

    attempts = 0

    while attempts < max_attempts:

        try:

            element = driver.execute_script(js_script, xpath)

            if element:

                # Converter o elemento retornado pelo JavaScript em um WebElement do Selenium

                web_element = driver.find_element(By.XPATH, xpath)

                return web_element.text

        except Exception as e:

            print(f"Erro ao executar script JavaScript: {e}. Tentando novamente em {delay} segundo(s)...")

        attempts += 1

        time.sleep(delay)

    return None



def run_automation_gerid(file_path, update_label_func=None, update_status_func=None, stop_event=None):

    workbook = openpyxl.load_workbook(file_path)

    worksheet = workbook.active

    processo_manager = GeridProcessoManager()

    processo_manager.inicializar_contagem(worksheet)

    service = Service(ChromeDriverManager().install())

    driver = webdriver.Chrome(service=service)

    Finaliza = True

   

    try:

        linha = 2

        coluna = 3

        driver.get("https://geridinss.dataprev.gov.br/gpa")

        driver.implicitly_wait(10)

        driver.maximize_window()

        print(f"Aguardando procedimento de Login...")

        WebDriverWait(driver, 300).until(EC.presence_of_element_located((By.XPATH, "/html/body/div[1]/div[2]/ul/li")))

        print(f"Login realizado com sucesso.")

        success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

        if success:

            print("O botão foi clicado com sucesso.")

        else:

            print("Não foi possível clicar no botão após várias tentativas.")

        if update_status_func:

            update_status_func("Processando registros...")

       

        while Finaliza and not stop_event.is_set():

            try:

                if stop_event and stop_event.is_set():

                    print("Interrupção solicitada, finalizando...")

                    break

                servidor = worksheet.cell(row=linha, column=1).value

                UO = worksheet.cell(row=linha, column=2).value

                Sistema = worksheet.cell(row=linha, column=coluna).value

                Subsistema = worksheet.cell(row=linha, column=coluna + 1).value

                Papel = worksheet.cell(row=linha, column=coluna + 2).value

                TipoUO = worksheet.cell(row=linha, column=coluna + 3).value

                validade = worksheet.cell(row=linha, column=coluna + 4).value

                if validade:

                    validade_str = validade.strftime("%d/%m/%Y")

                Situacao = worksheet.cell(row=linha, column=coluna + 5).value

                if not servidor:

                    try:

                        workbook.save(file_path)

                        print("Arquivo salvo com sucesso.")

                        close_workbook(workbook)

                    except Exception as e:

                        print(f"Erro ao salvar ou fechar o arquivo: {e}")

                    finally:

                        driver.quit()

                        print("Final!")

                        show_success_popup()

                        return

               



                if Situacao is not None:

                    linha += 1

                    if update_label_func:

                        update_label_func(linha)

                    continue







                if update_label_func:

                    update_label_func(linha)







                print("==============================================================")

                print(f"{linha}:{servidor}-{UO}-{Sistema}-{Subsistema}-{Papel}-{validade}")

                driver.get("https://geridinss.dataprev.gov.br/gpa")

                tempo_inicio = datetime.now()

                time.sleep(2)

                success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                if success:

                    pass

                else:

                    print("Não foi possível clicar no botão após várias tentativas.")

                    time.sleep(5)

                    continue

                sistema_label_xpath = "/html/body/div[1]/div[2]/form[1]/fieldset/div[1]/label/span"

                try:

                    sistema_label = WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH, sistema_label_xpath)))

                    try:

                        Select(safe_find_element(driver, By.ID, "form:sistema")).select_by_visible_text(Sistema)

                    except (NoSuchElementException, ElementNotInteractableException):

                        print("Sistema não localizado dentre as opções disponíveis.")

                        worksheet.cell(row=linha, column=8).value = "Sistema não localizado dentre as opções disponíveis."

                        linha += 1

                        continue

                except TimeoutException:

                    driver.get("https://geridinss.dataprev.gov.br/gpa")

                    success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                    if success:

                        pass

                    else:

                        print("Não foi possível clicar no botão após várias tentativas.")

                    continue

                try:

                    Select(safe_find_element(driver, By.ID, "form:subsistema")).select_by_visible_text(Subsistema)

                    Select(safe_find_element(driver, By.ID, "form:papel")).select_by_visible_text(Papel)

                    Select(safe_find_element(driver, By.ID, "form:tipoDominio")).select_by_visible_text(TipoUO)

                    driver.find_element(By.ID, "form:dominio").clear()

                    driver.find_element(By.ID, "form:dominio").send_keys(UO)

                    driver.find_element(By.ID, "form:usuario").clear()

                    driver.find_element(By.ID, "form:usuario").send_keys(servidor)

                    driver.find_element(By.ID, "form:filtrar").click()

                    time.sleep(1)

                except (NoSuchElementException, ElementNotInteractableException) as e:

                    print(f"Erro ao interagir com elementos da página: {e}")

                    print("Atualizando a página e tentando novamente...")

                    driver.get("https://geridinss.dataprev.gov.br/gpa")

                    time.sleep(5)

                    continue

                xpath = "/html/body/div[1]/div[2]/ul/li"

                js_script = """

                    return document.evaluate(

                        arguments[0],

                        document,

                        null,

                        XPathResult.FIRST_ORDERED_NODE_TYPE,

                        null

                    ).singleNodeValue !== null;

                """

                try:

                    elemento_existe = driver.execute_script(js_script, xpath)

                    if elemento_existe:

                        print("Erro de comunicação detectado. Aguardando e tentando novamente...")

                        driver.get("https://geridinss.dataprev.gov.br/gpa")

                        execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                        continue

                except:

                    pass

                try:





                    if element_exists(driver, "/html/body/div[1]/div[2]/form[2]/table/tbody/tr/td[7]"):

                        element = WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, "/html/body/div[1]/div[2]/form[2]/table/tbody/tr/td[7]")))

                        data_string = driver.find_element(By.XPATH, "/html/body/div[1]/div[2]/form[2]/table/tbody/tr/td[7]").text

                        data = datetime.strptime(data_string, "%d/%m/%Y")

                        validade_formatada = validade.strftime("%d/%m/%Y")

                        data_formatada = data.strftime("%d/%m/%Y")

                        print("Data de validade informada:", validade_formatada)

                        print("Data de validade atual:", data_formatada)

                        data_string_dt = datetime.strptime(data_string, "%d/%m/%Y")

                        try:

                            workbook.save(file_path)

                        except Exception as e:

                            print(f"Erro ao salvar o arquivo: {e}")





                        # if data_string_dt < validade:

                        #     print("A data extraída do gerid é menor que a data informada. Avançando para revalidação...")

                        #     driver.find_element(By.ID, "dataTableCredencial:selected").click()

                        #     driver.find_element(By.ID, "form2:btAlterar").click()

                        #     driver.find_element(By.ID, "form2:dataValidade").send_keys(Keys.CONTROL, 'a')

                        #     validade_str = validade.strftime("%d/%m/%Y")

                        #     driver.find_element(By.ID, "form2:dataValidade").send_keys(validade_str)

                        #     driver.find_element(By.ID, "form2:confirmar").click()

                        #     sucesso, nova_coluna = verificar_mensagem_operacao(driver, worksheet, linha, coluna)

                        #     if sucesso:

                        #         coluna = nova_coluna

                        #         continue

                        #     tempo_fim = datetime.now()

                        #     processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                        #     if update_status_func:

                        #         update_status_func(processo_manager.get_status(linha))

                        #     try:

                        #         workbook.save(file_path)

                        #     except Exception as e:

                        #         print(f"Erro ao salvar o arquivo: {e}")

                        # else:

                        #     worksheet.cell(row=linha, column=coluna + 5).value = f"Sistema já revalidado ({validade.strftime('%d/%m/%Y')})"

                        #     print(f"Sistema já revalidado ({validade.strftime('%d/%m/%Y')})")

                        #     tempo_fim = datetime.now()

                        #     processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                        #     if update_status_func:

                        #         update_status_func(processo_manager.get_status(linha))

                        #     try:

                        #         workbook.save(file_path)

                        #     except Exception as e:

                        #         print(f"Erro ao salvar o arquivo: {e}")

                   

                   

                        #print("A data extraída do gerid é menor que a data informada. Avançando para revalidação...")

                       

                        if data_string_dt < validade:

                            driver.find_element(By.ID, "dataTableCredencial:selected").click()

                            driver.find_element(By.ID, "form2:btAlterar").click()

                            driver.find_element(By.ID, "form2:dataValidade").send_keys(Keys.CONTROL, 'a')

                            validade_str = validade.strftime("%d/%m/%Y")

                            driver.find_element(By.ID, "form2:dataValidade").send_keys(validade_str)

                            driver.find_element(By.ID, "form2:confirmar").click()

                            sucesso = verificar_mensagem_operacao(driver, worksheet, linha)

                            if sucesso:

                                linha += 1              

                                pass

                            else:

                                print("Erro - Repetindo operação!")

                                continue

                            tempo_fim = datetime.now()



                            processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                            if update_status_func:

                                update_status_func(processo_manager.get_status(linha))

                            try:

                                workbook.save(file_path)

                            except Exception as e:

                                print(f"Erro ao salvar o arquivo: {e}")

                        else:

                            worksheet.cell(row=linha, column=coluna + 5).value = f"Sistema já revalidado ({validade.strftime('%d/%m/%Y')})"

                            print(f"Sistema já revalidado ({validade.strftime('%d/%m/%Y')})")

                            tempo_fim = datetime.now()

                            processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                            driver.get("https://geridinss.dataprev.gov.br/gpa")

                            time.sleep(3)

                            success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                            linha += 1

                            continue





                   

                    else:

                        def retry_on_stale_element(func, *args, max_attempts=5, delay=1):

                            """Tenta executar uma função e repete em caso de StaleElementReferenceException."""

                            attempts = 0

                            while attempts < max_attempts:

                                try:

                                    return func(*args)

                                except StaleElementReferenceException:

                                    attempts += 1

                                    print(f"StaleElementReferenceException ocorreu. Tentativa {attempts} de {max_attempts}.")

                                    time.sleep(delay)

                            raise Exception(f"Não foi possível executar a ação após {max_attempts} tentativas.")



                        # Exemplo de uso da função retry_on_stale_element

                        def safe_interaction(driver, by, value, action):

                            """Interage com um elemento de forma segura, repetindo em caso de StaleElementReferenceException."""

                            def interaction():

                                element = driver.find_element(by, value)

                                action(element)

                            retry_on_stale_element(interaction)



                        # Aplicando a lógica no trecho do código

                        if element_exists(driver, "/html/body/div[1]/div[2]/form[1]/div[2]/ul/li"):

                            print("Atribuindo novo acesso....")

                            try:

                                # Clicar no botão "Novo"

                                retry_on_stale_element(lambda: driver.find_element(By.ID, "form2:novo").click())

                                time.sleep(2)

                                # Selecionar Sistema

                                retry_on_stale_element(lambda: Select(safe_find_element(driver, By.ID, "form:sistema")).select_by_visible_text(Sistema))



                                # Selecionar Subsistema

                                retry_on_stale_element(lambda: Select(safe_find_element(driver, By.ID, "form:subsistema")).select_by_visible_text(Subsistema))



                                # Selecionar Papel

                                retry_on_stale_element(lambda: Select(safe_find_element(driver, By.ID, "form2:papel")).select_by_visible_text(Papel))



                                # Selecionar Tipo de Domínio

                                retry_on_stale_element(lambda: Select(safe_find_element(driver, By.ID, "form2:tipoDominio")).select_by_visible_text(TipoUO))



                                # Preencher Domínio

                                def fill_dominio(element):

                                    element.clear()

                                    element.send_keys(UO)

                                safe_interaction(driver, By.ID, "form2:dominio", fill_dominio)



                                # Preencher Usuário

                                def fill_usuario(element):

                                    element.click()

                                    element.clear()

                                    element.send_keys(servidor)

                                safe_interaction(driver, By.ID, "form2:usuario", fill_usuario)



                                # Preencher Data de Validade

                                def fill_data_validade(element):

                                    element.click()

                                    element.clear()

                                    element.send_keys(Keys.CONTROL, 'a')

                                    validade_str = validade.strftime("%d/%m/%Y")

                                    element.send_keys(validade_str)

                                safe_interaction(driver, By.ID, "form2:dataValidade", fill_data_validade)



                                # Selecionar Períodos

                                for periodo in ["form2:periodo:0", "form2:periodo:6", "form2:periodo:7"]:

                                    retry_on_stale_element(lambda: safe_find_element(driver, By.ID, periodo).click())



                                # Preencher Hora de Início

                                def fill_hora_inicio(element):

                                    element.click()

                                    element.send_keys(Keys.CONTROL, 'a')

                                    element.send_keys("0000")

                                safe_interaction(driver, By.ID, "form2:horaAcessoInicio", fill_hora_inicio)



                                # Preencher Hora de Fim

                                def fill_hora_fim(element):

                                    element.click()

                                    element.send_keys(Keys.CONTROL, 'a')

                                    element.send_keys("2359")

                                safe_interaction(driver, By.ID, "form2:horaAcessoFim", fill_hora_fim)



                                # Clicar em Confirmar

                                retry_on_stale_element(lambda: safe_find_element(driver, By.ID, "form2:confirmar").click())



                                # Verificar mensagem de sucesso

                                mensagem = check_element_with_retry(driver, "/html/body/div[1]/div[2]/ul/li")

                                if mensagem:

                                    print(mensagem)

                                    worksheet.cell(row=linha, column=8).value = mensagem



                                # Verificar mensagem de sucesso novamente

                                mensagem_sucesso = check_element_with_retry(driver, "/html/body/div[1]/div[2]/form[1]/div[2]/ul/li")

                                if mensagem_sucesso:

                                    print(mensagem_sucesso)

                                    worksheet.cell(row=linha, column=8).value = mensagem_sucesso



                                print(f"Acesso: {UO} - {Sistema} - {Subsistema} - {Papel} - {servidor} - {validade_str}")



                                try:

                                    workbook.save(file_path)

                                except Exception as e:

                                    print(f"Erro ao salvar o arquivo: {e}")



                                tempo_fim = datetime.now()

                                processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                                if update_status_func:

                                    update_status_func(processo_manager.get_status(linha))

                                linha += 1

                                continue

                            except Exception as e:

                                print(f"Erro ao atribuir novo acesso repetindo operação: {e}")

                                driver.get("https://geridinss.dataprev.gov.br/gpa")

                                time.sleep(3)

                                success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                                if success:

                                    print("O botão foi clicado com sucesso.")

                                else:

                                    print("Não foi possível clicar no botão após várias tentativas.")

                                continue







                except Exception as e:

                    print(f"Erro inesperado: {e}")

                    print("Tentando recuperar e continuar...")

                    driver.get("https://geridinss.dataprev.gov.br/gpa")

                    time.sleep(3)

                    success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                    if success:

                        print("O botão foi clicado com sucesso.")

                    else:

                        print("Não foi possível clicar no botão após várias tentativas.")

                    time.sleep(5)

                    continue

            except Exception as e:

                if stop_event.is_set():

                    break

                tempo_fim = datetime.now()

                processo_manager.registrar_tempo(tempo_inicio, tempo_fim, linha)

                if update_status_func:

                    update_status_func(processo_manager.get_status(linha))

                print(f"Erro inesperado: {e}")

                print("Tentando recuperar e continuar...")

                driver.get("https://geridinss.dataprev.gov.br/gpa")

                time.sleep(3)

                success = execute_javascript_with_retry(driver, "document.getElementById('formMenu:btAtribAcesso').click();")

                if success:

                    print("O botão foi clicado com sucesso.")

                else:

                    print("Não foi possível clicar no botão após várias tentativas.")

                time.sleep(5)

                continue

        print("==== FIM ====")

    except Exception as e:

        print(f"Erro geral: {e}")

        if update_status_func:

            update_status_func("Erro durante a execução...")

    finally:

        driver.quit()

        print("Driver encerrado com sucesso.")

        if stop_event.is_set():

            if update_status_func:

                update_status_func("Operação interrompida pelo usuário")

    if update_status_func:

        update_status_func("Execução finalizada.")



def run_automation_thread(file_path, update_label_func=None, update_status_func=None, stop_event=None):

    thread = threading.Thread(target=run_automation_gerid, args=(file_path, update_label_func, update_status_func, stop_event))

    thread.start()

    return thread
